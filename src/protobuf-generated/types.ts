/* eslint-disable */
// Auto-generated by generate-protos script on Mon Nov 20 2023 15:36:53 GMT+0800 (China Standard Time)

import EAuthSessionGuardType from '../../src/enums-steam/EAuthSessionGuardType';
import EAuthSessionSecurityHistory from '../../src/enums-steam/EAuthSessionSecurityHistory';
import EAuthTokenPlatformType from '../../src/enums-steam/EAuthTokenPlatformType';
import EAuthTokenRevokeAction from '../../src/enums-steam/EAuthTokenRevokeAction';
import EAuthTokenState from '../../src/enums-steam/EAuthTokenState';
import EBanContentCheckResult from '../../src/enums-steam/EBanContentCheckResult';
import EMsg from '../../src/enums-steam/EMsg';
import EOSType from '../../src/enums-steam/EOSType';
import EProtoClanEventType from '../../src/enums-steam/EProtoClanEventType';
import EResult from '../../src/enums-steam/EResult';
import ESessionPersistence from '../../src/enums-steam/ESessionPersistence';
import ETokenRenewalType from '../../src/enums-steam/ETokenRenewalType';

///////////////////////////////////////////////
// common.proto
///////////////////////////////////////////////

export interface CAppBootstrapData {
	appid?: number;
	hidden?: boolean;
	user_tag?: string[];
}

export interface CAppOverview {
	appid?: number;
	display_name?: string;
	visible_in_game_list?: boolean;
	sort_as?: string;
	app_type?: number;
	mru_index?: number;
	rt_recent_activity_time?: number;
	minutes_playtime_forever?: number;
	minutes_playtime_last_two_weeks?: number;
	rt_last_time_played?: number;
	store_tag?: number[];
	association?: CAppOverview_AppAssociation[];
	store_category?: number[];
	rt_original_release_date?: number;
	rt_steam_release_date?: number;
	icon_hash?: string;
	logo_hash?: string;
	controller_support?: number;
	vr_supported?: boolean;
	metacritic_score?: number;
	size_on_disk?: string;
	third_party_mod?: boolean;
	icon_data?: string;
	icon_data_format?: string;
	gameid?: string;
	library_capsule_filename?: string;
	per_client_data?: CAppOverview_PerClientData[];
	most_available_clientid?: string;
	selected_clientid?: string;
	rt_store_asset_mtime?: number;
	rt_custom_image_mtime?: number;
	optional_parent_app_id?: number;
	owner_account_id?: number;
	compat_mapping_enabled?: boolean;
	compat_mapping_priority?: number;
	compat_mapping_tool_name?: string;
	review_score_with_bombs?: number;
	review_percentage_with_bombs?: number;
	review_score_without_bombs?: number;
	review_percentage_without_bombs?: number;
	library_id?: string;
	vr_only?: boolean;
	mastersub_appid?: number;
	mastersub_includedwith_logo?: string;
	compat_allowlist_setting?: number;
	site_license_site_name?: string;
}

export interface CAppOverview_AppAssociation {
	type?: number;
	name?: string;
}

export interface CAppOverview_Change {
	app_overview?: CAppOverview[];
	removed_appid?: number[];
}

export interface CAppOverview_PerClientData {
	clientid?: string;
	client_name?: string;
	display_status?: number;
	status_percentage?: number;
	active_beta?: string;
	installed?: boolean;
	bytes_downloaded?: string;
	bytes_total?: string;
	streaming_to_local_client?: boolean;
	is_available_on_current_platform?: boolean;
	is_invalid_os_type?: boolean;
	playtime_left?: number;
}

export interface CBilling_Address {
	first_name?: string;
	last_name?: string;
	address1?: string;
	address2?: string;
	city?: string;
	us_state?: string;
	country_code?: string;
	postcode?: string;
	zip_plus4?: number;
	phone?: string;
}

export interface CBroadcast_NotifyBroadcastSessionHeartbeat_Notification {
	broadcast_id?: string;
}

export interface CBroadcast_NotifyBroadcastUploadStop_Notification {
	broadcast_upload_id?: string;
	upload_result?: number;
}

export interface CChatPartyBeacon {
	app_id?: number;
	steamid_owner?: string;
	beacon_id?: string;
	game_metadata?: string;
}

export interface CChatRoleActions {
	role_id?: string;
	can_create_rename_delete_channel?: boolean;
	can_kick?: boolean;
	can_ban?: boolean;
	can_invite?: boolean;
	can_change_tagline_avatar_name?: boolean;
	can_chat?: boolean;
	can_view_history?: boolean;
	can_change_group_roles?: boolean;
	can_change_user_roles?: boolean;
	can_mention_all?: boolean;
	can_set_watching_broadcast?: boolean;
}

export interface CChatRoom_GetChatRoomGroupSummary_Response {
	chat_group_id?: string;
	chat_group_name?: string;
	active_member_count?: number;
	active_voice_member_count?: number;
	default_chat_id?: string;
	chat_rooms?: CChatRoomState[];
	clanid?: number;
	chat_group_tagline?: string;
	accountid_owner?: number;
	top_members?: number[];
	chat_group_avatar_sha?: Buffer;
	rank?: number;
	default_role_id?: string;
	role_ids?: string[];
	role_actions?: CChatRoleActions[];
	watching_broadcast_accountid?: number;
	appid?: number;
	party_beacons?: CChatPartyBeacon[];
	watching_broadcast_channel_id?: string;
	active_minigame_id?: string;
	avatar_ugc_url?: string;
	disabled?: boolean;
}

export interface CChatRoomState {
	chat_id?: string;
	chat_name?: string;
	voice_allowed?: boolean;
	members_in_voice?: number[];
	time_last_message?: number;
	sort_order?: number;
	last_message?: string;
	accountid_last_message?: number;
}

export interface CClanEventData {
	gid?: string;
	clan_steamid?: string;
	event_name?: string;
	event_type?: number;
	appid?: number;
	server_address?: string;
	server_password?: string;
	rtime32_start_time?: number;
	rtime32_end_time?: number;
	comment_count?: number;
	creator_steamid?: string;
	last_update_steamid?: string;
	event_notes?: string;
	jsondata?: string;
	announcement_body?: CCommunity_ClanAnnouncementInfo;
	published?: boolean;
	hidden?: boolean;
	rtime32_visibility_start?: number;
	rtime32_visibility_end?: number;
	broadcaster_accountid?: number;
	follower_count?: number;
	ignore_count?: number;
	forum_topic_id?: string;
	rtime32_last_modified?: number;
	news_post_gid?: string;
	rtime_mod_reviewed?: number;
	featured_app_tagid?: number;
	referenced_appids?: number[];
}

export interface CClientMetrics_AppInterfaceCreation {
	raw_version?: string;
	requested_interface_type?: string;
}

export interface CClientMetrics_AppInterfaceMethodCounts {
	interface_name?: string;
	method_name?: string;
	call_count?: number;
}

export interface CClientMetrics_AppInterfaceStats_Notification {
	game_id?: string;
	interfaces_created?: CClientMetrics_AppInterfaceCreation[];
	methods_called?: CClientMetrics_AppInterfaceMethodCounts[];
	session_length_seconds?: number;
}

export interface CClientMetrics_ClientBootstrap_Notification {
	summary?: CClientMetrics_ClientBootstrap_Summary;
}

export interface CClientMetrics_ClientBootstrap_RequestInfo {
	original_hostname?: string;
	actual_hostname?: string;
	path?: string;
	base_name?: string;
	success?: boolean;
	status_code?: number;
	address_of_request_url?: string;
	response_time_ms?: number;
	bytes_received?: string;
	num_retries?: number;
}

export interface CClientMetrics_ClientBootstrap_Summary {
	launcher_type?: number;
	steam_realm?: number;
	beta_name?: string;
	download_completed?: boolean;
	total_time_ms?: number;
	manifest_requests?: CClientMetrics_ClientBootstrap_RequestInfo[];
	package_requests?: CClientMetrics_ClientBootstrap_RequestInfo[];
}

export interface CClientMetrics_CloudAppSyncStats_Notification {
	app_id?: number;
	platform_type?: number;
	preload?: boolean;
	blocking_app_launch?: boolean;
	files_uploaded?: number;
	files_downloaded?: number;
	files_deleted?: number;
	bytes_uploaded?: string;
	bytes_downloaded?: string;
	microsec_total?: string;
	microsec_init_caches?: string;
	microsec_validate_state?: string;
	microsec_ac_launch?: string;
	microsec_ac_prep_user_files?: string;
	microsec_ac_exit?: string;
	microsec_build_sync_list?: string;
	microsec_delete_files?: string;
	microsec_download_files?: string;
	microsec_upload_files?: string;
	hardware_type?: number;
	files_managed?: number;
}

export interface CClientMetrics_ContentDownloadResponse_Counts {
	class_100?: number;
	class_200?: number;
	class_300?: number;
	class_400?: number;
	class_500?: number;
	no_response?: number;
	class_unknown?: number;
}

export interface CClientMetrics_ContentDownloadResponse_Counts_Notification {
	cell_id?: number;
	data?: CClientMetrics_ContentDownloadResponse_Hosts;
}

export interface CClientMetrics_ContentDownloadResponse_HostCounts {
	hostname?: string;
	source_type?: number;
	counts?: CClientMetrics_ContentDownloadResponse_Counts;
}

export interface CClientMetrics_ContentDownloadResponse_Hosts {
	hosts?: CClientMetrics_ContentDownloadResponse_HostCounts[];
}

export interface CClientMetrics_ContentValidation_Notification {
	validation_result?: number;
	app_id?: number;
	staged_files?: boolean;
	user_initiated?: boolean;
	early_out?: boolean;
	chunks_scanned?: number;
	chunks_corrupt?: number;
	bytes_scanned?: string;
	chunk_bytes_corrupt?: string;
	total_file_size_corrupt?: string;
}

export interface CClientMetrics_DownloadRates_Notification {
	cell_id?: number;
	stats?: CClientMetrics_DownloadRates_Notification_StatsInfo[];
	throttling_kbps?: number;
}

export interface CClientMetrics_DownloadRates_Notification_StatsInfo {
	source_type?: number;
	source_id?: number;
	bytes?: string;
	host_name?: string;
	microseconds?: string;
	used_ipv6?: boolean;
	proxied?: boolean;
	used_http2?: boolean;
	cache_hits?: number;
	cache_misses?: number;
	hit_bytes?: string;
	miss_bytes?: string;
}

export interface CClientMetrics_IPv6Connectivity_Notification {
	cell_id?: number;
	results?: CClientMetrics_IPv6Connectivity_Result[];
	private_ip_is_rfc6598?: boolean;
}

export interface CClientMetrics_IPv6Connectivity_Result {
	protocol_tested?: number;
	connectivity_state?: number;
}

export interface CClientMetrics_ReportClientArgs_Notification {
	client_args?: string[];
	gpu_webview_regkey_disabled?: boolean;
	suppress_gpu_chrome?: boolean;
	browser_not_supported?: boolean;
	hw_accel_video_regkey_disabled?: boolean;
	mini_mode_enabled?: boolean;
	fps_counter_enabled?: boolean;
	library_low_bandwidth_mode_enabled?: boolean;
	library_low_perf_mode_enabled?: boolean;
}

export interface CClientMetrics_ReportReactUsage_Notification {
	product?: string;
	version?: string;
	routes?: CClientMetrics_ReportReactUsage_Notification_RouteData[];
	components?: CClientMetrics_ReportReactUsage_Notification_ComponentData[];
	actions?: CClientMetrics_ReportReactUsage_Notification_ActionData[];
}

export interface CClientMetrics_ReportReactUsage_Notification_ActionData {
	action?: string;
	count?: number;
}

export interface CClientMetrics_ReportReactUsage_Notification_ComponentData {
	component?: string;
	count?: number;
}

export interface CClientMetrics_ReportReactUsage_Notification_RouteData {
	route?: string;
	count?: number;
}

export interface CClientMetrics_SteamPipeWorkStats_Notification {
	appid?: number;
	depotid?: number;
	work_type?: number;
	operations?: CClientMetrics_SteamPipeWorkStats_Operation[];
	hardware_type?: number;
}

export interface CClientMetrics_SteamPipeWorkStats_Operation {
	type?: number;
	num_ops?: number;
	num_bytes?: string;
	busy_time_ms?: string;
	idle_time_ms?: string;
	sum_run_time_ms?: string;
	sum_wait_time_ms?: string;
}

export interface CCommunity_ClanAnnouncementInfo {
	gid?: string;
	clanid?: string;
	posterid?: string;
	headline?: string;
	posttime?: number;
	updatetime?: number;
	body?: string;
	commentcount?: number;
	tags?: string[];
	language?: number;
	hidden?: boolean;
	forum_topic_id?: string;
	event_gid?: string;
	voteupcount?: number;
	votedowncount?: number;
}

export interface CCuratorPreferences {
	supported_languages?: number;
	platform_windows?: boolean;
	platform_mac?: boolean;
	platform_linux?: boolean;
	vr_content?: boolean;
	adult_content_violence?: boolean;
	adult_content_sex?: boolean;
	timestamp_updated?: number;
	tagids_curated?: number[];
	tagids_filtered?: number[];
	website_title?: string;
	website_url?: string;
	discussion_url?: string;
	show_broadcast?: boolean;
}

export interface CLibraryBootstrapData {
	app_data?: CAppBootstrapData[];
}

export interface CLocalizationToken {
	language?: number;
	localized_string?: string;
}

export interface CMarketingMessages_MarkMessageSeen_Notification {
	gid?: string;
	display_index?: number;
	template_type?: number;
}

export interface CMsgAMUnlockHEVC {
}

export interface CMsgAMUnlockHEVCResponse {
	eresult?: EResult;
}

export interface CMsgAMUnlockStreaming {
}

export interface CMsgAMUnlockStreamingResponse {
	eresult?: EResult;
	encryption_key?: Buffer;
}

export interface CMsgAppRights {
	edit_info?: boolean;
	publish?: boolean;
	view_error_data?: boolean;
	download?: boolean;
	upload_cdkeys?: boolean;
	generate_cdkeys?: boolean;
	view_financials?: boolean;
	manage_ceg?: boolean;
	manage_signing?: boolean;
	manage_cdkeys?: boolean;
	edit_marketing?: boolean;
	economy_support?: boolean;
	economy_support_supervisor?: boolean;
	manage_pricing?: boolean;
	broadcast_live?: boolean;
	view_marketing_traffic?: boolean;
}

export interface CMsgAuthTicket {
	estate?: number;
	eresult?: EResult;
	steamid?: string;
	gameid?: string;
	h_steam_pipe?: number;
	ticket_crc?: number;
	ticket?: Buffer;
}

export interface CMsgBadgeCraftedNotification {
	appid?: number;
	badge_level?: number;
}

export interface CMsgClientAccountInfo {
	persona_name?: string;
	ip_country?: string;
	count_authed_computers?: number;
	account_flags?: number;
	facebook_id?: string;
	facebook_name?: string;
	steamguard_notify_newmachines?: boolean;
	steamguard_machine_name_user_chosen?: string;
	is_phone_verified?: boolean;
	two_factor_state?: number;
	is_phone_identifying?: boolean;
	is_phone_needing_reverify?: boolean;
}

export interface CMsgClientActivateOEMLicense {
	bios_manufacturer?: string;
	bios_serialnumber?: string;
	license_file?: Buffer;
	mainboard_manufacturer?: string;
	mainboard_product?: string;
	mainboard_serialnumber?: string;
}

export interface CMsgClientAddFriend {
	steamid_to_add?: string;
	accountname_or_email_to_add?: string;
}

export interface CMsgClientAddFriendResponse {
	eresult?: EResult;
	steam_id_added?: string;
	persona_name_added?: string;
}

export interface CMsgClientAddFriendToGroup {
	groupid?: number;
	steamiduser?: string;
}

export interface CMsgClientAddFriendToGroupResponse {
	eresult?: EResult;
}

export interface CMsgClientAMGetClanOfficers {
	steamid_clan?: string;
}

export interface CMsgClientAMGetClanOfficersResponse {
	eresult?: EResult;
	steamid_clan?: string;
	officer_count?: number;
}

export interface CMsgClientAMGetPersonaNameHistory {
	id_count?: number;
	Ids?: CMsgClientAMGetPersonaNameHistory_IdInstance[];
}

export interface CMsgClientAMGetPersonaNameHistory_IdInstance {
	steamid?: string;
}

export interface CMsgClientAMGetPersonaNameHistoryResponse {
	responses?: CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance[];
}

export interface CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance {
	eresult?: EResult;
	steamid?: string;
	names?: CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance[];
}

export interface CMsgClientAMGetPersonaNameHistoryResponse_NameTableInstance_NameInstance {
	name_since?: number;
	name?: string;
}

export interface CMsgClientAppInfoChanges {
	current_change_number?: number;
	force_full_update?: boolean;
	appIDs?: number[];
}

export interface CMsgClientAppInfoRequest {
	apps?: CMsgClientAppInfoRequest_App[];
	supports_batches?: boolean;
}

export interface CMsgClientAppInfoRequest_App {
	app_id?: number;
	section_flags?: number;
	section_CRC?: number[];
}

export interface CMsgClientAppInfoResponse {
	apps?: CMsgClientAppInfoResponse_App[];
	apps_unknown?: number[];
	apps_pending?: number;
}

export interface CMsgClientAppInfoResponse_App {
	app_id?: number;
	change_number?: number;
	sections?: CMsgClientAppInfoResponse_App_Section[];
}

export interface CMsgClientAppInfoResponse_App_Section {
	section_id?: number;
	section_kv?: Buffer;
}

export interface CMsgClientAppInfoUpdate {
	last_changenumber?: number;
	send_changelist?: boolean;
}

export interface CMsgClientAuthList {
	tokens_left?: number;
	last_request_seq?: number;
	last_request_seq_from_server?: number;
	tickets?: CMsgAuthTicket[];
	app_ids?: number[];
	message_sequence?: number;
}

export interface CMsgClientAuthListAck {
	ticket_crc?: number[];
	app_ids?: number[];
	message_sequence?: number;
}

export interface CMsgClientAuthorizeLocalDevice {
	eresult?: EResult;
	owner_account_id?: number;
	authed_device_token?: string;
}

export interface CMsgClientAuthorizeLocalDeviceNotification {
	eresult?: EResult;
	owner_account_id?: number;
	local_device_token?: string;
}

export interface CMsgClientAuthorizeLocalDeviceRequest {
	device_description?: string;
	owner_account_id?: number;
	local_device_token?: string;
}

export interface CMsgClientChallengeRequest {
	steamid?: string;
}

export interface CMsgClientChallengeResponse {
	challenge?: string;
}

export interface CMsgClientChangeStatus {
	persona_state?: number;
	player_name?: string;
	is_auto_generated_name?: boolean;
	high_priority?: boolean;
	persona_set_by_user?: boolean;
	persona_state_flags?: number;
	need_persona_response?: boolean;
	is_client_idle?: boolean;
}

export interface CMsgClientChatGetFriendMessageHistory {
	steamid?: string;
}

export interface CMsgClientChatGetFriendMessageHistoryForOfflineMessages {
}

export interface CMsgClientChatGetFriendMessageHistoryResponse {
	steamid?: string;
	success?: number;
	messages?: CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage[];
}

export interface CMsgClientChatGetFriendMessageHistoryResponse_FriendMessage {
	accountid?: number;
	timestamp?: number;
	message?: string;
	unread?: boolean;
}

export interface CMsgClientChatInvite {
	steam_id_invited?: string;
	steam_id_chat?: string;
	steam_id_patron?: string;
	chatroom_type?: number;
	steam_id_friend_chat?: string;
	chat_name?: string;
	game_id?: string;
}

export interface CMsgClientCheckAppBetaPassword {
	app_id?: number;
	betapassword?: string;
}

export interface CMsgClientCheckAppBetaPasswordResponse {
	eresult?: EResult;
	betapasswords?: CMsgClientCheckAppBetaPasswordResponse_BetaPassword[];
}

export interface CMsgClientCheckAppBetaPasswordResponse_BetaPassword {
	betaname?: string;
	betapassword?: string;
}

export interface CMsgClientCheckFileSignature {
	app_id?: number;
}

export interface CMsgClientCheckFileSignatureResponse {
	app_id?: number;
	pid?: number;
	eresult?: EResult;
	filename?: string;
	esignatureresult?: number;
	sha_file?: Buffer;
	signatureheader?: Buffer;
	filesize?: number;
	getlasterror?: number;
	evalvesignaturecheckdetail?: number;
}

export interface CMsgClientClanState {
	steamid_clan?: string;
	clan_account_flags?: number;
	name_info?: CMsgClientClanState_NameInfo;
	user_counts?: CMsgClientClanState_UserCounts;
	events?: CMsgClientClanState_Event[];
	announcements?: CMsgClientClanState_Event[];
	chat_room_private?: boolean;
}

export interface CMsgClientClanState_Event {
	gid?: string;
	event_time?: number;
	headline?: string;
	game_id?: string;
	just_posted?: boolean;
}

export interface CMsgClientClanState_NameInfo {
	clan_name?: string;
	sha_avatar?: Buffer;
}

export interface CMsgClientClanState_UserCounts {
	members?: number;
	online?: number;
	chatting?: number;
	in_game?: number;
	chat_room_members?: number;
}

export interface CMsgClientCMList {
	cm_addresses?: number[];
	cm_ports?: number[];
	cm_websocket_addresses?: string[];
	percent_default_to_websocket?: number;
}

export interface CMsgClientCommentNotifications {
	count_new_comments?: number;
	count_new_comments_owner?: number;
	count_new_comments_subscriptions?: number;
}

export interface CMsgClientConnectionStats {
	stats_logon?: CMsgClientConnectionStats_Stats_Logon;
	stats_vconn?: CMsgClientConnectionStats_Stats_VConn;
}

export interface CMsgClientConnectionStats_Stats_Logon {
	connect_attempts?: number;
	connect_successes?: number;
	connect_failures?: number;
	connections_dropped?: number;
	seconds_running?: number;
	msec_tologonthistime?: number;
	count_bad_cms?: number;
}

export interface CMsgClientConnectionStats_Stats_UDP {
	pkts_sent?: string;
	bytes_sent?: string;
	pkts_recv?: string;
	pkts_processed?: string;
	bytes_recv?: string;
}

export interface CMsgClientConnectionStats_Stats_VConn {
	connections_udp?: number;
	connections_tcp?: number;
	stats_udp?: CMsgClientConnectionStats_Stats_UDP;
	pkts_abandoned?: string;
	conn_req_received?: string;
	pkts_resent?: string;
	msgs_sent?: string;
	msgs_sent_failed?: string;
	msgs_recv?: string;
	datagrams_sent?: string;
	datagrams_recv?: string;
	bad_pkts_recv?: string;
	unknown_conn_pkts_recv?: string;
	missed_pkts_recv?: string;
	dup_pkts_recv?: string;
	failed_connect_challenges?: string;
	micro_sec_avg_latency?: number;
	micro_sec_min_latency?: number;
	micro_sec_max_latency?: number;
	mem_pool_msg_in_use?: number;
}

export interface CMsgClientCreateFriendsGroup {
	steamid?: string;
	groupname?: string;
	steamid_friends?: string[];
}

export interface CMsgClientCreateFriendsGroupResponse {
	eresult?: EResult;
	groupid?: number;
}

export interface CMsgClientDeauthorizeDevice {
	eresult?: EResult;
	deauthorization_account_id?: number;
}

export interface CMsgClientDeauthorizeDeviceRequest {
	deauthorization_account_id?: number;
	deauthorization_device_token?: string;
}

export interface CMsgClientDeleteFriendsGroup {
	steamid?: string;
	groupid?: number;
}

export interface CMsgClientDeleteFriendsGroupResponse {
	eresult?: EResult;
}

export interface CMsgClientDeregisterWithServer {
	eservertype?: number;
	app_id?: number;
}

export interface CMsgClientDPCheckSpecialSurvey {
	survey_id?: number;
}

export interface CMsgClientDPCheckSpecialSurveyResponse {
	eResult?: EResult;
	state?: number;
	name?: string;
	custom_url?: string;
	include_software?: boolean;
	token?: Buffer;
}

export interface CMsgClientDPContentStatsReport {
	stats_machine_id?: string;
	country_code?: string;
	os_type?: number;
	language?: number;
	num_install_folders?: number;
	num_installed_games?: number;
	size_installed_games?: string;
}

export interface CMsgClientDPSendSpecialSurveyResponse {
	survey_id?: number;
	data?: Buffer;
}

export interface CMsgClientDPSendSpecialSurveyResponseReply {
	eResult?: EResult;
	token?: Buffer;
}

export interface CMsgClientEmailAddrInfo {
	email_address?: string;
	email_is_validated?: boolean;
	email_validation_changed?: boolean;
	credential_change_requires_code?: boolean;
	password_or_secretqa_change_requires_code?: boolean;
	remind_user_about_email?: boolean;
}

export interface CMsgClientEmoticonList {
	emoticons?: CMsgClientEmoticonList_Emoticon[];
	stickers?: CMsgClientEmoticonList_Sticker[];
	effects?: CMsgClientEmoticonList_Effect[];
}

export interface CMsgClientEmoticonList_Effect {
	name?: string;
	count?: number;
	time_received?: number;
	infinite_use?: boolean;
	appid?: number;
}

export interface CMsgClientEmoticonList_Emoticon {
	name?: string;
	count?: number;
	time_last_used?: number;
	use_count?: number;
	time_received?: number;
	appid?: number;
}

export interface CMsgClientEmoticonList_Sticker {
	name?: string;
	count?: number;
	time_received?: number;
	appid?: number;
	time_last_used?: number;
	use_count?: number;
}

export interface CMsgClientFriendMsg {
	steamid?: string;
	chat_entry_type?: number;
	message?: Buffer;
	rtime32_server_timestamp?: number;
	echo_to_sender?: boolean;
}

export interface CMsgClientFriendMsgIncoming {
	steamid_from?: string;
	chat_entry_type?: number;
	from_limited_account?: boolean;
	message?: Buffer;
	rtime32_server_timestamp?: number;
}

export interface CMsgClientFriendProfileInfo {
	steamid_friend?: string;
}

export interface CMsgClientFriendProfileInfoResponse {
	eresult?: EResult;
	steamid_friend?: string;
	time_created?: number;
	real_name?: string;
	city_name?: string;
	state_name?: string;
	country_name?: string;
	headline?: string;
	summary?: string;
}

export interface CMsgClientFriendsGroupsList {
	bremoval?: boolean;
	bincremental?: boolean;
	friendGroups?: CMsgClientFriendsGroupsList_FriendGroup[];
	memberships?: CMsgClientFriendsGroupsList_FriendGroupsMembership[];
}

export interface CMsgClientFriendsGroupsList_FriendGroup {
	nGroupID?: number;
	strGroupName?: string;
}

export interface CMsgClientFriendsGroupsList_FriendGroupsMembership {
	ulSteamID?: string;
	nGroupID?: number;
}

export interface CMsgClientFriendUserStatusPublished {
	friend_steamid?: string;
	appid?: number;
	status_text?: string;
}

export interface CMsgClientFSGetFriendsSteamLevels {
	accountids?: number[];
}

export interface CMsgClientFSGetFriendsSteamLevelsResponse {
	friends?: CMsgClientFSGetFriendsSteamLevelsResponse_Friend[];
}

export interface CMsgClientFSGetFriendsSteamLevelsResponse_Friend {
	accountid?: number;
	level?: number;
}

export interface CMsgClientGameConnectTokens {
	max_tokens_to_keep?: number;
	tokens?: Buffer[];
}

export interface CMsgClientGamesPlayed {
	games_played?: CMsgClientGamesPlayed_GamePlayed[];
	client_os_type?: number;
	cloud_gaming_platform?: number;
}

export interface CMsgClientGamesPlayed_GamePlayed {
	steam_id_gs?: string;
	game_id?: string;
	deprecated_game_ip_address?: number;
	game_port?: number;
	is_secure?: boolean;
	token?: Buffer;
	game_extra_info?: string;
	game_data_blob?: Buffer;
	process_id?: number;
	streaming_provider_id?: number;
	game_flags?: number;
	owner_id?: number;
	vr_hmd_vendor?: string;
	vr_hmd_model?: string;
	launch_option_type?: number;
	primary_controller_type?: number;
	primary_steam_controller_serial?: string;
	total_steam_controller_count?: number;
	total_non_steam_controller_count?: number;
	controller_workshop_file_id?: string;
	launch_source?: number;
	vr_hmd_runtime?: number;
	game_ip_address?: CMsgIPAddress;
	controller_connection_type?: number;
}

export interface CMsgClientGetAppOwnershipTicket {
	app_id?: number;
}

export interface CMsgClientGetAppOwnershipTicketResponse {
	eresult?: EResult;
	app_id?: number;
	ticket?: Buffer;
}

export interface CMsgClientGetAuthorizedDevices {
}

export interface CMsgClientGetAuthorizedDevicesResponse {
	eresult?: EResult;
	authorized_device?: CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice[];
}

export interface CMsgClientGetAuthorizedDevicesResponse_AuthorizedDevice {
	auth_device_token?: string;
	device_name?: string;
	last_access_time?: number;
	borrower_id?: number;
	is_pending?: boolean;
	app_played?: number;
}

export interface CMsgClientGetCDNAuthToken {
	depot_id?: number;
	host_name?: string;
	app_id?: number;
}

export interface CMsgClientGetCDNAuthTokenResponse {
	eresult?: EResult;
	token?: string;
	expiration_time?: number;
}

export interface CMsgClientGetClanActivityCounts {
	steamid_clans?: string[];
}

export interface CMsgClientGetClanActivityCountsResponse {
	eresult?: EResult;
}

export interface CMsgClientGetClientAppList {
	media?: boolean;
	tools?: boolean;
	games?: boolean;
	only_installed?: boolean;
	only_changing?: boolean;
	comics?: boolean;
}

export interface CMsgClientGetClientAppListResponse {
	apps?: CMsgClientGetClientAppListResponse_App[];
	bytes_available?: string;
}

export interface CMsgClientGetClientAppListResponse_App {
	appid?: number;
	category?: string;
	favorite?: boolean;
	installed?: boolean;
	auto_update?: boolean;
	bytes_downloaded?: string;
	bytes_needed?: string;
	bytes_download_rate?: number;
	dlcs?: CMsgClientGetClientAppListResponse_App_DLC[];
	app_type?: string;
	download_paused?: boolean;
	num_downloading?: number;
	num_paused?: number;
	changing?: boolean;
	available_on_platform?: boolean;
}

export interface CMsgClientGetClientAppListResponse_App_DLC {
	appid?: number;
	installed?: boolean;
}

export interface CMsgClientGetClientDetails {
}

export interface CMsgClientGetClientDetailsResponse {
	package_version?: number;
	os?: string;
	machine_name?: string;
	ip_public?: string;
	ip_private?: string;
	games_running?: CMsgClientGetClientDetailsResponse_Game[];
	bytes_available?: string;
	protocol_version?: number;
}

export interface CMsgClientGetClientDetailsResponse_Game {
	appid?: number;
	extra_info?: string;
	time_running_sec?: number;
}

export interface CMsgClientGetDepotDecryptionKey {
	depot_id?: number;
	app_id?: number;
}

export interface CMsgClientGetDepotDecryptionKeyResponse {
	eresult?: EResult;
	depot_id?: number;
	depot_encryption_key?: Buffer;
}

export interface CMsgClientGetEmoticonList {
}

export interface CMsgClientGetUserStats {
	game_id?: string;
	crc_stats?: number;
	schema_local_version?: number;
	steam_id_for_user?: string;
}

export interface CMsgClientGetUserStatsResponse {
	game_id?: string;
	eresult?: EResult;
	crc_stats?: number;
	schema?: Buffer;
	stats?: CMsgClientGetUserStatsResponse_Stats[];
	achievement_blocks?: CMsgClientGetUserStatsResponse_Achievement_Blocks[];
}

export interface CMsgClientGetUserStatsResponse_Achievement_Blocks {
	achievement_id?: number;
	unlock_time?: number[];
}

export interface CMsgClientGetUserStatsResponse_Stats {
	stat_id?: number;
	stat_value?: number;
}

export interface CMsgClientGMSServerQuery {
	app_id?: number;
	geo_location_ip?: number;
	region_code?: number;
	filter_text?: string;
	max_servers?: number;
}

export interface CMsgClientHeartBeat {
	send_reply?: boolean;
}

export interface CMsgClientHideFriend {
	friendid?: string;
	hide?: boolean;
}

export interface CMsgClientInstallClientApp {
	appid?: number;
}

export interface CMsgClientInstallClientAppResponse {
	result?: EResult;
}

export interface CMsgClientInviteToGame {
	steam_id_dest?: string;
	steam_id_src?: string;
	connect_string?: string;
	remote_play?: string;
}

export interface CMsgClientIsLimitedAccount {
	bis_limited_account?: boolean;
	bis_community_banned?: boolean;
	bis_locked_account?: boolean;
	bis_limited_account_allowed_to_invite_friends?: boolean;
}

export interface CMsgClientItemAnnouncements {
	count_new_items?: number;
	unseen_items?: CMsgClientItemAnnouncements_UnseenItem[];
}

export interface CMsgClientItemAnnouncements_UnseenItem {
	appid?: number;
	context_id?: string;
	asset_id?: string;
	amount?: string;
	rtime32_gained?: number;
	source_appid?: number;
}

export interface CMsgClientKickPlayingSession {
	only_stop_game?: boolean;
}

export interface CMsgClientLBSFindOrCreateLB {
	app_id?: number;
	leaderboard_sort_method?: number;
	leaderboard_display_type?: number;
	create_if_not_found?: boolean;
	leaderboard_name?: string;
}

export interface CMsgClientLBSFindOrCreateLBResponse {
	eresult?: EResult;
	leaderboard_id?: number;
	leaderboard_entry_count?: number;
	leaderboard_sort_method?: number;
	leaderboard_display_type?: number;
	leaderboard_name?: string;
}

export interface CMsgClientLBSGetLBEntries {
	app_id?: number;
	leaderboard_id?: number;
	range_start?: number;
	range_end?: number;
	leaderboard_data_request?: number;
	steamids?: string[];
}

export interface CMsgClientLBSGetLBEntriesResponse {
	eresult?: EResult;
	leaderboard_entry_count?: number;
	entries?: CMsgClientLBSGetLBEntriesResponse_Entry[];
}

export interface CMsgClientLBSGetLBEntriesResponse_Entry {
	steam_id_user?: string;
	global_rank?: number;
	score?: number;
	details?: Buffer;
	ugc_id?: string;
}

export interface CMsgClientLBSSetScore {
	app_id?: number;
	leaderboard_id?: number;
	score?: number;
	details?: Buffer;
	upload_score_method?: number;
}

export interface CMsgClientLBSSetScoreResponse {
	eresult?: EResult;
	leaderboard_entry_count?: number;
	score_changed?: boolean;
	global_rank_previous?: number;
	global_rank_new?: number;
}

export interface CMsgClientLBSSetUGC {
	app_id?: number;
	leaderboard_id?: number;
	ugc_id?: string;
}

export interface CMsgClientLBSSetUGCResponse {
	eresult?: EResult;
}

export interface CMsgClientLicenseList {
	eresult?: EResult;
	licenses?: CMsgClientLicenseList_License[];
}

export interface CMsgClientLicenseList_License {
	package_id?: number;
	time_created?: number;
	time_next_process?: number;
	minute_limit?: number;
	minutes_used?: number;
	payment_method?: number;
	flags?: number;
	purchase_country_code?: string;
	license_type?: number;
	territory_code?: number;
	change_number?: number;
	owner_id?: number;
	initial_period?: number;
	initial_time_unit?: number;
	renewal_period?: number;
	renewal_time_unit?: number;
	access_token?: string;
	master_package_id?: number;
}

export interface CMsgClientLoggedOff {
	eresult?: EResult;
}

export interface CMsgClientLogOff {
}

export interface CMsgClientLogon {
	protocol_version?: number;
	deprecated_obfustucated_private_ip?: number;
	cell_id?: number;
	last_session_id?: number;
	client_package_version?: number;
	client_language?: string;
	client_os_type?: number;
	should_remember_password?: boolean;
	wine_version?: string;
	deprecated_10?: number;
	obfuscated_private_ip?: CMsgIPAddress;
	deprecated_public_ip?: number;
	qos_level?: number;
	client_supplied_steam_id?: string;
	public_ip?: CMsgIPAddress;
	machine_id?: Buffer;
	launcher_type?: number;
	ui_mode?: number;
	chat_mode?: number;
	steam2_auth_ticket?: Buffer;
	email_address?: string;
	rtime32_account_creation?: number;
	account_name?: string;
	password?: string;
	game_server_token?: string;
	login_key?: string;
	was_converted_deprecated_msg?: boolean;
	anon_user_target_account_name?: string;
	resolved_user_steam_id?: string;
	eresult_sentryfile?: number;
	sha_sentryfile?: Buffer;
	auth_code?: string;
	otp_type?: number;
	otp_value?: number;
	otp_identifier?: string;
	steam2_ticket_request?: boolean;
	sony_psn_ticket?: Buffer;
	sony_psn_service_id?: string;
	create_new_psn_linked_account_if_needed?: boolean;
	sony_psn_name?: string;
	game_server_app_id?: number;
	steamguard_dont_remember_computer?: boolean;
	machine_name?: string;
	machine_name_userchosen?: string;
	country_override?: string;
	is_steam_box?: boolean;
	client_instance_id?: string;
	two_factor_code?: string;
	supports_rate_limit_response?: boolean;
	web_logon_nonce?: string;
	priority_reason?: number;
	embedded_client_secret?: CMsgClientSecret;
	disable_partner_autogrants?: boolean;
	is_steam_deck?: boolean;
	access_token?: string;
	is_chrome_os?: boolean;
	is_tesla?: boolean;
}

export interface CMsgClientLogonResponse {
	eresult?: EResult;
	legacy_out_of_game_heartbeat_seconds?: number;
	heartbeat_seconds?: number;
	deprecated_public_ip?: number;
	rtime32_server_time?: number;
	account_flags?: number;
	cell_id?: number;
	email_domain?: string;
	steam2_ticket?: Buffer;
	eresult_extended?: number;
	webapi_authenticate_user_nonce?: string;
	cell_id_ping_threshold?: number;
	deprecated_use_pics?: boolean;
	vanity_url?: string;
	public_ip?: CMsgIPAddress;
	user_country?: string;
	client_supplied_steamid?: string;
	ip_country_code?: string;
	parental_settings?: Buffer;
	parental_setting_signature?: Buffer;
	count_loginfailures_to_migrate?: number;
	count_disconnects_to_migrate?: number;
	ogs_data_report_time_window?: number;
	client_instance_id?: string;
	force_client_update_check?: boolean;
	agreement_session_url?: string;
	token_id?: string;
}

export interface CMsgClientManageFriendsGroup {
	groupid?: number;
	groupname?: string;
	steamid_friends_added?: string[];
	steamid_friends_removed?: string[];
}

export interface CMsgClientManageFriendsGroupResponse {
	eresult?: EResult;
}

export interface CMsgClientMMSCreateLobby {
	app_id?: number;
	max_members?: number;
	lobby_type?: number;
	lobby_flags?: number;
	cell_id?: number;
	deprecated_public_ip?: number;
	metadata?: Buffer;
	persona_name_owner?: string;
	public_ip?: CMsgIPAddress;
}

export interface CMsgClientMMSCreateLobbyResponse {
	app_id?: number;
	steam_id_lobby?: string;
	eresult?: EResult;
}

export interface CMsgClientMMSGetLobbyData {
	app_id?: number;
	steam_id_lobby?: string;
}

export interface CMsgClientMMSGetLobbyList {
	app_id?: number;
	num_lobbies_requested?: number;
	cell_id?: number;
	deprecated_public_ip?: number;
	filters?: CMsgClientMMSGetLobbyList_Filter[];
	public_ip?: CMsgIPAddress;
}

export interface CMsgClientMMSGetLobbyList_Filter {
	key?: string;
	value?: string;
	comparision?: number;
	filter_type?: number;
}

export interface CMsgClientMMSGetLobbyListResponse {
	app_id?: number;
	eresult?: EResult;
	lobbies?: CMsgClientMMSGetLobbyListResponse_Lobby[];
}

export interface CMsgClientMMSGetLobbyListResponse_Lobby {
	steam_id?: string;
	max_members?: number;
	lobby_type?: number;
	lobby_flags?: number;
	metadata?: Buffer;
	num_members?: number;
	distance?: number;
	weight?: string;
}

export interface CMsgClientMMSGetLobbyStatus {
	app_id?: number;
	steam_id_lobby?: string;
	claim_membership?: boolean;
	claim_ownership?: boolean;
}

export interface CMsgClientMMSGetLobbyStatusResponse {
	app_id?: number;
	steam_id_lobby?: string;
	lobby_status?: number;
}

export interface CMsgClientMMSInviteToLobby {
	app_id?: number;
	steam_id_lobby?: string;
	steam_id_user_invited?: string;
}

export interface CMsgClientMMSJoinLobby {
	app_id?: number;
	steam_id_lobby?: string;
	persona_name?: string;
}

export interface CMsgClientMMSJoinLobbyResponse {
	app_id?: number;
	steam_id_lobby?: string;
	chat_room_enter_response?: number;
	max_members?: number;
	lobby_type?: number;
	lobby_flags?: number;
	steam_id_owner?: string;
	metadata?: Buffer;
	members?: CMsgClientMMSJoinLobbyResponse_Member[];
}

export interface CMsgClientMMSJoinLobbyResponse_Member {
	steam_id?: string;
	persona_name?: string;
	metadata?: Buffer;
}

export interface CMsgClientMMSLeaveLobby {
	app_id?: number;
	steam_id_lobby?: string;
}

export interface CMsgClientMMSLeaveLobbyResponse {
	app_id?: number;
	steam_id_lobby?: string;
	eresult?: EResult;
}

export interface CMsgClientMMSLobbyChatMsg {
	app_id?: number;
	steam_id_lobby?: string;
	steam_id_sender?: string;
	lobby_message?: Buffer;
}

export interface CMsgClientMMSLobbyData {
	app_id?: number;
	steam_id_lobby?: string;
	num_members?: number;
	max_members?: number;
	lobby_type?: number;
	lobby_flags?: number;
	steam_id_owner?: string;
	metadata?: Buffer;
	members?: CMsgClientMMSLobbyData_Member[];
	lobby_cellid?: number;
	owner_should_accept_changes?: boolean;
}

export interface CMsgClientMMSLobbyData_Member {
	steam_id?: string;
	persona_name?: string;
	metadata?: Buffer;
}

export interface CMsgClientMMSLobbyGameServerSet {
	app_id?: number;
	steam_id_lobby?: string;
	deprecated_game_server_ip?: number;
	game_server_port?: number;
	game_server_steam_id?: string;
	game_server_ip?: CMsgIPAddress;
}

export interface CMsgClientMMSSendLobbyChatMsg {
	app_id?: number;
	steam_id_lobby?: string;
	steam_id_target?: string;
	lobby_message?: Buffer;
}

export interface CMsgClientMMSSetLobbyData {
	app_id?: number;
	steam_id_lobby?: string;
	steam_id_member?: string;
	max_members?: number;
	lobby_type?: number;
	lobby_flags?: number;
	metadata?: Buffer;
}

export interface CMsgClientMMSSetLobbyDataResponse {
	app_id?: number;
	steam_id_lobby?: string;
	eresult?: EResult;
}

export interface CMsgClientMMSSetLobbyGameServer {
	app_id?: number;
	steam_id_lobby?: string;
	deprecated_game_server_ip?: number;
	game_server_port?: number;
	game_server_steam_id?: string;
	game_server_ip?: CMsgIPAddress;
}

export interface CMsgClientMMSSetLobbyLinked {
	app_id?: number;
	steam_id_lobby?: string;
	steam_id_lobby2?: string;
}

export interface CMsgClientMMSSetLobbyOwner {
	app_id?: number;
	steam_id_lobby?: string;
	steam_id_new_owner?: string;
}

export interface CMsgClientMMSSetLobbyOwnerResponse {
	app_id?: number;
	steam_id_lobby?: string;
	eresult?: EResult;
}

export interface CMsgClientMMSSetRatelimitPolicyOnClient {
	app_id?: number;
	enable_rate_limits?: boolean;
	seconds_per_message?: number;
	milliseconds_per_data_update?: number;
}

export interface CMsgClientMMSUserJoinedLobby {
	app_id?: number;
	steam_id_lobby?: string;
	steam_id_user?: string;
	persona_name?: string;
}

export interface CMsgClientMMSUserLeftLobby {
	app_id?: number;
	steam_id_lobby?: string;
	steam_id_user?: string;
	persona_name?: string;
}

export interface CMsgClientNetworkingCertReply {
	cert?: Buffer;
	ca_key_id?: string;
	ca_signature?: Buffer;
}

export interface CMsgClientNetworkingCertRequest {
	key_data?: Buffer;
	app_id?: number;
}

export interface CMsgClientNetworkingMobileCertReply {
	encoded_cert?: string;
}

export interface CMsgClientNetworkingMobileCertRequest {
	app_id?: number;
}

export interface CMsgClientNewLoginKey {
	unique_id?: number;
	login_key?: string;
}

export interface CMsgClientNewLoginKeyAccepted {
	unique_id?: number;
}

export interface CMsgClientOfflineMessageNotification {
	offline_messages?: number;
	friends_with_offline_messages?: number[];
}

export interface CMsgClientOGSReportBug {
	sessionid?: string;
	bugtext?: string;
	screenshot?: Buffer;
}

export interface CMsgClientOGSReportString {
	accumulated?: boolean;
	sessionid?: string;
	severity?: number;
	formatter?: string;
	varargs?: Buffer;
}

export interface CMsgClientP2PConnectionFailInfo {
	steam_id_dest?: string;
	steam_id_src?: string;
	app_id?: number;
	ep2p_session_error?: number;
	connection_id_dest?: string;
	close_reason?: number;
	close_message?: string;
}

export interface CMsgClientP2PConnectionInfo {
	steam_id_dest?: string;
	steam_id_src?: string;
	app_id?: number;
	candidate?: Buffer;
	connection_id_src?: string;
	rendezvous?: Buffer;
}

export interface CMsgClientPackageInfoRequest {
	package_ids?: number[];
	meta_data_only?: boolean;
}

export interface CMsgClientPackageInfoResponse {
	packages?: CMsgClientPackageInfoResponse_Package[];
	packages_unknown?: number[];
	packages_pending?: number;
}

export interface CMsgClientPackageInfoResponse_Package {
	package_id?: number;
	change_number?: number;
	sha?: Buffer;
	buffer?: Buffer;
}

export interface CMsgClientPersonaState {
	status_flags?: number;
	friends?: CMsgClientPersonaState_Friend[];
}

export interface CMsgClientPersonaState_Friend {
	friendid?: string;
	persona_state?: number;
	game_played_app_id?: number;
	game_server_ip?: number;
	game_server_port?: number;
	persona_state_flags?: number;
	online_session_instances?: number;
	persona_set_by_user?: boolean;
	player_name?: string;
	query_port?: number;
	steamid_source?: string;
	avatar_hash?: Buffer;
	last_logoff?: number;
	last_logon?: number;
	last_seen_online?: number;
	clan_rank?: number;
	game_name?: string;
	gameid?: string;
	game_data_blob?: Buffer;
	clan_data?: CMsgClientPersonaState_Friend_ClanData;
	clan_tag?: string;
	rich_presence?: CMsgClientPersonaState_Friend_KV[];
	broadcast_id?: string;
	game_lobby_id?: string;
	watching_broadcast_accountid?: number;
	watching_broadcast_appid?: number;
	watching_broadcast_viewers?: number;
	watching_broadcast_title?: string;
	is_community_banned?: boolean;
	player_name_pending_review?: boolean;
	avatar_pending_review?: boolean;
}

export interface CMsgClientPersonaState_Friend_ClanData {
	ogg_app_id?: number;
	chat_group_id?: string;
}

export interface CMsgClientPersonaState_Friend_KV {
	key?: string;
	value?: string;
}

export interface CMsgClientPICSAccessTokenRequest {
	packageids?: number[];
	appids?: number[];
}

export interface CMsgClientPICSAccessTokenResponse {
	package_access_tokens?: CMsgClientPICSAccessTokenResponse_PackageToken[];
	package_denied_tokens?: number[];
	app_access_tokens?: CMsgClientPICSAccessTokenResponse_AppToken[];
	app_denied_tokens?: number[];
}

export interface CMsgClientPICSAccessTokenResponse_AppToken {
	appid?: number;
	access_token?: string;
}

export interface CMsgClientPICSAccessTokenResponse_PackageToken {
	packageid?: number;
	access_token?: string;
}

export interface CMsgClientPICSChangesSinceRequest {
	since_change_number?: number;
	send_app_info_changes?: boolean;
	send_package_info_changes?: boolean;
	num_app_info_cached?: number;
	num_package_info_cached?: number;
}

export interface CMsgClientPICSChangesSinceResponse {
	current_change_number?: number;
	since_change_number?: number;
	force_full_update?: boolean;
	package_changes?: CMsgClientPICSChangesSinceResponse_PackageChange[];
	app_changes?: CMsgClientPICSChangesSinceResponse_AppChange[];
	force_full_app_update?: boolean;
	force_full_package_update?: boolean;
}

export interface CMsgClientPICSChangesSinceResponse_AppChange {
	appid?: number;
	change_number?: number;
	needs_token?: boolean;
}

export interface CMsgClientPICSChangesSinceResponse_PackageChange {
	packageid?: number;
	change_number?: number;
	needs_token?: boolean;
}

export interface CMsgClientPICSProductInfoRequest {
	packages?: CMsgClientPICSProductInfoRequest_PackageInfo[];
	apps?: CMsgClientPICSProductInfoRequest_AppInfo[];
	meta_data_only?: boolean;
	num_prev_failed?: number;
	supports_package_tokens?: number;
}

export interface CMsgClientPICSProductInfoRequest_AppInfo {
	appid?: number;
	access_token?: string;
	only_public_obsolete?: boolean;
}

export interface CMsgClientPICSProductInfoRequest_PackageInfo {
	packageid?: number;
	access_token?: string;
}

export interface CMsgClientPICSProductInfoResponse {
	apps?: CMsgClientPICSProductInfoResponse_AppInfo[];
	unknown_appids?: number[];
	packages?: CMsgClientPICSProductInfoResponse_PackageInfo[];
	unknown_packageids?: number[];
	meta_data_only?: boolean;
	response_pending?: boolean;
	http_min_size?: number;
	http_host?: string;
}

export interface CMsgClientPICSProductInfoResponse_AppInfo {
	appid?: number;
	change_number?: number;
	missing_token?: boolean;
	sha?: Buffer;
	buffer?: Buffer;
	only_public?: boolean;
	size?: number;
}

export interface CMsgClientPICSProductInfoResponse_PackageInfo {
	packageid?: number;
	change_number?: number;
	missing_token?: boolean;
	sha?: Buffer;
	buffer?: Buffer;
	size?: number;
}

export interface CMsgClientPlayerNicknameList {
	removal?: boolean;
	incremental?: boolean;
	nicknames?: CMsgClientPlayerNicknameList_PlayerNickname[];
}

export interface CMsgClientPlayerNicknameList_PlayerNickname {
	steamid?: string;
	nickname?: string;
}

export interface CMsgClientPlayingSessionState {
	playing_blocked?: boolean;
	playing_app?: number;
}

export interface CMsgClientPurchaseResponse {
	eresult?: EResult;
	purchase_result_details?: number;
	purchase_receipt_info?: Buffer;
}

export interface CMsgClientPurchaseWithMachineID {
	package_id?: number;
	machine_info?: Buffer;
}

export interface CMsgClientReadMachineAuth {
	filename?: string;
	offset?: number;
	cubtoread?: number;
}

export interface CMsgClientReadMachineAuthResponse {
	filename?: string;
	eresult?: EResult;
	filesize?: number;
	sha_file?: Buffer;
	getlasterror?: number;
	offset?: number;
	cubread?: number;
	bytes_read?: Buffer;
	filename_sentry?: string;
}

export interface CMsgClientRedeemGuestPass {
	guest_pass_id?: string;
}

export interface CMsgClientRedeemGuestPassResponse {
	eresult?: EResult;
	package_id?: number;
	must_own_appid?: number;
}

export interface CMsgClientRegisterAuthTicketWithCM {
	protocol_version?: number;
	ticket?: Buffer;
	client_instance_id?: string;
}

export interface CMsgClientRegisterKey {
	key?: string;
}

export interface CMsgClientRegisterOEMMachine {
	oem_register_file?: Buffer;
}

export interface CMsgClientRegisterOEMMachineResponse {
	eresult?: EResult;
}

export interface CMsgClientRemoveFriend {
	friendid?: string;
}

export interface CMsgClientRemoveFriendFromGroup {
	groupid?: number;
	steamiduser?: string;
}

export interface CMsgClientRemoveFriendFromGroupResponse {
	eresult?: EResult;
}

export interface CMsgClientReportOverlayDetourFailure {
	failure_strings?: string[];
}

export interface CMsgClientRequestAccountData {
	account_or_email?: string;
	action?: number;
}

export interface CMsgClientRequestAccountDataResponse {
	action?: number;
	eresult?: EResult;
	account_name?: string;
	ct_matches?: number;
	account_name_suggestion1?: string;
	account_name_suggestion2?: string;
	account_name_suggestion3?: string;
}

export interface CMsgClientRequestCommentNotifications {
}

export interface CMsgClientRequestedClientStats {
	stats_to_send?: CMsgClientRequestedClientStats_StatsToSend[];
}

export interface CMsgClientRequestedClientStats_StatsToSend {
	client_stat?: number;
	stat_aggregate_method?: number;
}

export interface CMsgClientRequestEncryptedAppTicket {
	app_id?: number;
	userdata?: Buffer;
}

export interface CMsgClientRequestEncryptedAppTicketResponse {
	app_id?: number;
	eresult?: EResult;
	encrypted_app_ticket?: EncryptedAppTicket;
}

export interface CMsgClientRequestForgottenPasswordEmail {
	account_name?: string;
	password_tried?: string;
}

export interface CMsgClientRequestForgottenPasswordEmailResponse {
	eResult?: EResult;
	use_secret_question?: boolean;
}

export interface CMsgClientRequestFreeLicense {
	appids?: number[];
}

export interface CMsgClientRequestFreeLicenseResponse {
	eresult?: EResult;
	granted_packageids?: number[];
	granted_appids?: number[];
}

export interface CMsgClientRequestFriendData {
	persona_state_requested?: number;
	friends?: string[];
}

export interface CMsgClientRequestItemAnnouncements {
}

export interface CMsgClientRequestMachineAuth {
	filename?: string;
	eresult_sentryfile?: number;
	filesize?: number;
	sha_sentryfile?: Buffer;
	lock_account_action?: number;
	otp_type?: number;
	otp_identifier?: string;
	otp_sharedsecret?: Buffer;
	otp_value?: number;
	machine_name?: string;
	machine_name_userchosen?: string;
}

export interface CMsgClientRequestMachineAuthResponse {
	eresult?: EResult;
}

export interface CMsgClientRequestOfflineMessageCount {
}

export interface CMsgClientRequestWebAPIAuthenticateUserNonce {
	token_type?: number;
}

export interface CMsgClientRequestWebAPIAuthenticateUserNonceResponse {
	eresult?: EResult;
	token_type?: number;
	webapi_authenticate_user_nonce?: string;
}

export interface CMsgClientRichPresenceInfo {
	rich_presence?: CMsgClientRichPresenceInfo_RichPresence[];
}

export interface CMsgClientRichPresenceInfo_RichPresence {
	steamid_user?: string;
	rich_presence_kv?: Buffer;
}

export interface CMsgClientRichPresenceRequest {
	steamid_request?: string[];
}

export interface CMsgClientRichPresenceUpload {
	rich_presence_kv?: Buffer;
	steamid_broadcast?: string[];
}

export interface CMsgClientScreenshotsChanged {
}

export interface CMsgClientSecret {
	version?: number;
	appid?: number;
	deviceid?: number;
	nonce?: string;
	hmac?: Buffer;
}

export interface CMsgClientSentLogs {
}

export interface CMsgClientServersAvailable {
	server_types_available?: CMsgClientServersAvailable_Server_Types_Available[];
	server_type_for_auth_services?: number;
}

export interface CMsgClientServersAvailable_Server_Types_Available {
	server?: number;
	changed?: boolean;
}

export interface CMsgClientServerTimestampRequest {
	client_request_timestamp?: string;
}

export interface CMsgClientServerTimestampResponse {
	client_request_timestamp?: string;
	server_timestamp_ms?: string;
}

export interface CMsgClientServiceCall {
	sysid_routing?: Buffer;
	call_handle?: number;
	module_crc?: number;
	module_hash?: Buffer;
	function_id?: number;
	cub_output_max?: number;
	flags?: number;
	callparameter?: Buffer;
	ping_only?: boolean;
	max_outstanding_calls?: number;
}

export interface CMsgClientServiceCallResponse {
	sysid_routing?: Buffer;
	call_handle?: number;
	module_crc?: number;
	module_hash?: Buffer;
	ecallresult?: number;
	result_content?: Buffer;
	os_version_info?: Buffer;
	system_info?: Buffer;
	load_address?: string;
	exception_record?: Buffer;
	portable_os_version_info?: Buffer;
	portable_system_info?: Buffer;
	was_converted?: boolean;
	internal_result?: number;
	current_count?: number;
	last_call_handle?: number;
	last_call_module_crc?: number;
	last_call_sysid_routing?: Buffer;
	last_ecallresult?: number;
	last_callissue_delta?: number;
	last_callcomplete_delta?: number;
}

export interface CMsgClientServiceMethodLegacy {
	method_name?: string;
	serialized_method?: Buffer;
	is_notification?: boolean;
}

export interface CMsgClientServiceMethodLegacyResponse {
	method_name?: string;
	serialized_method_response?: Buffer;
}

export interface CMsgClientServiceModule {
	module_crc?: number;
	module_hash?: Buffer;
	module_content?: Buffer;
}

export interface CMsgClientSessionToken {
	token?: string;
}

export interface CMsgClientSetClientAppUpdateState {
	appid?: number;
	update?: boolean;
}

export interface CMsgClientSetClientAppUpdateStateResponse {
	result?: EResult;
}

export interface CMsgClientSetPlayerNickname {
	steamid?: string;
	nickname?: string;
}

export interface CMsgClientSetPlayerNicknameResponse {
	eresult?: EResult;
}

export interface CMsgClientSharedLibraryLockStatus {
	locked_library?: CMsgClientSharedLibraryLockStatus_LockedLibrary[];
	own_library_locked_by?: number;
}

export interface CMsgClientSharedLibraryLockStatus_LockedLibrary {
	owner_id?: number;
	locked_by?: number;
}

export interface CMsgClientSharedLibraryStopPlaying {
	seconds_left?: number;
	stop_apps?: CMsgClientSharedLibraryStopPlaying_StopApp[];
}

export interface CMsgClientSharedLibraryStopPlaying_StopApp {
	app_id?: number;
	owner_id?: number;
}

export interface CMsgClientStat2 {
	stat_detail?: CMsgClientStat2_StatDetail[];
}

export interface CMsgClientStat2_StatDetail {
	client_stat?: number;
	ll_value?: string;
	time_of_day?: number;
	cell_id?: number;
	depot_id?: number;
	app_id?: number;
}

export interface CMsgClientStatsUpdated {
	steam_id?: string;
	game_id?: string;
	crc_stats?: number;
	updated_stats?: CMsgClientStatsUpdated_Updated_Stats[];
}

export interface CMsgClientStatsUpdated_Updated_Stats {
	stat_id?: number;
	stat_value?: number;
}

export interface CMsgClientStoreUserStats {
	game_id?: string;
	explicit_reset?: boolean;
	stats_to_store?: CMsgClientStoreUserStats_Stats_To_Store[];
}

export interface CMsgClientStoreUserStats_Stats_To_Store {
	stat_id?: number;
	stat_value?: number;
}

export interface CMsgClientStoreUserStats2 {
	game_id?: string;
	settor_steam_id?: string;
	settee_steam_id?: string;
	crc_stats?: number;
	explicit_reset?: boolean;
	stats?: CMsgClientStoreUserStats2_Stats[];
}

export interface CMsgClientStoreUserStats2_Stats {
	stat_id?: number;
	stat_value?: number;
}

export interface CMsgClientStoreUserStatsResponse {
	game_id?: string;
	eresult?: EResult;
	crc_stats?: number;
	stats_failed_validation?: CMsgClientStoreUserStatsResponse_Stats_Failed_Validation[];
	stats_out_of_date?: boolean;
}

export interface CMsgClientStoreUserStatsResponse_Stats_Failed_Validation {
	stat_id?: number;
	reverted_stat_value?: number;
}

export interface CMsgClientTicketAuthComplete {
	steam_id?: string;
	game_id?: string;
	estate?: number;
	eauth_session_response?: number;
	DEPRECATED_ticket?: Buffer;
	ticket_crc?: number;
	ticket_sequence?: number;
	owner_steam_id?: string;
}

export interface CMsgClientUCMAddScreenshot {
	appid?: number;
	filename?: string;
	thumbname?: string;
	rtime32_created?: number;
	width?: number;
	height?: number;
	permissions?: number;
	caption?: string;
	shortcut_name?: string;
	tag?: CMsgClientUCMAddScreenshot_Tag[];
	tagged_steamid?: string[];
	spoiler_tag?: boolean;
	tagged_publishedfileid?: string[];
	vr_filename?: string;
}

export interface CMsgClientUCMAddScreenshot_Tag {
	tag_name?: string;
	tag_value?: string;
}

export interface CMsgClientUCMAddScreenshotResponse {
	eresult?: EResult;
	screenshotid?: string;
}

export interface CMsgClientUCMDeletePublishedFile {
	published_file_id?: string;
	app_id?: number;
}

export interface CMsgClientUCMDeletePublishedFileResponse {
	eresult?: EResult;
}

export interface CMsgClientUCMDeleteScreenshot {
	screenshotid?: string;
}

export interface CMsgClientUCMDeleteScreenshotResponse {
	eresult?: EResult;
}

export interface CMsgClientUCMEnumeratePublishedFilesByUserAction {
	app_id?: number;
	start_index?: number;
	action?: number;
}

export interface CMsgClientUCMEnumeratePublishedFilesByUserActionResponse {
	eresult?: EResult;
	published_files?: CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId[];
	total_results?: number;
}

export interface CMsgClientUCMEnumeratePublishedFilesByUserActionResponse_PublishedFileId {
	published_file_id?: string;
	rtime_time_stamp?: number;
}

export interface CMsgClientUCMEnumerateUserPublishedFiles {
	app_id?: number;
	start_index?: number;
	sort_order?: number;
}

export interface CMsgClientUCMEnumerateUserPublishedFilesResponse {
	eresult?: EResult;
	published_files?: CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId[];
	total_results?: number;
}

export interface CMsgClientUCMEnumerateUserPublishedFilesResponse_PublishedFileId {
	published_file_id?: string;
}

export interface CMsgClientUCMEnumerateUserSubscribedFiles {
	app_id?: number;
	start_index?: number;
	list_type?: number;
	matching_file_type?: number;
	count?: number;
}

export interface CMsgClientUCMEnumerateUserSubscribedFilesResponse {
	eresult?: EResult;
	subscribed_files?: CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId[];
	total_results?: number;
}

export interface CMsgClientUCMEnumerateUserSubscribedFilesResponse_PublishedFileId {
	published_file_id?: string;
	rtime32_subscribed?: number;
}

export interface CMsgClientUCMEnumerateUserSubscribedFilesWithUpdates {
	app_id?: number;
	start_index?: number;
	start_time?: number;
	desired_revision?: number;
}

export interface CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse {
	eresult?: EResult;
	subscribed_files?: CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId[];
	total_results?: number;
}

export interface CMsgClientUCMEnumerateUserSubscribedFilesWithUpdatesResponse_PublishedFileId {
	published_file_id?: string;
	rtime32_subscribed?: number;
	appid?: number;
	file_hcontent?: string;
	file_size?: number;
	rtime32_last_updated?: number;
	is_depot_content?: boolean;
}

export interface CMsgClientUCMGetPublishedFilesForUser {
	app_id?: number;
	creator_steam_id?: string;
	required_tags?: string[];
	excluded_tags?: string[];
	start_index?: number;
}

export interface CMsgClientUCMGetPublishedFilesForUserResponse {
	eresult?: EResult;
	published_files?: CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId[];
	total_results?: number;
}

export interface CMsgClientUCMGetPublishedFilesForUserResponse_PublishedFileId {
	published_file_id?: string;
}

export interface CMsgClientUCMPublishedFileUpdated {
	published_file_id?: string;
	app_id?: number;
	time_updated?: number;
	hcontent?: string;
	file_size?: number;
	is_depot_content?: boolean;
	revision?: number;
}

export interface CMsgClientUCMPublishFile {
	app_id?: number;
	file_name?: string;
	preview_file_name?: string;
	consumer_app_id?: number;
	title?: string;
	description?: string;
	tags?: string[];
	workshop_file?: boolean;
	visibility?: number;
	file_type?: number;
	url?: string;
	video_provider?: number;
	video_account_name?: string;
	video_identifier?: string;
	in_progress?: boolean;
}

export interface CMsgClientUCMPublishFileResponse {
	eresult?: EResult;
	published_file_id?: string;
	needs_workshop_legal_agreement_acceptance?: boolean;
}

export interface CMsgClientUCMSetUserPublishedFileAction {
	published_file_id?: string;
	app_id?: number;
	action?: number;
}

export interface CMsgClientUCMSetUserPublishedFileActionResponse {
	eresult?: EResult;
}

export interface CMsgClientUCMUpdatePublishedFile {
	app_id?: number;
	published_file_id?: string;
	file_name?: string;
	preview_file_name?: string;
	title?: string;
	description?: string;
	tags?: string[];
	visibility?: number;
	update_file?: boolean;
	update_preview_file?: boolean;
	update_title?: boolean;
	update_description?: boolean;
	update_tags?: boolean;
	update_visibility?: boolean;
	change_description?: string;
	update_url?: boolean;
	url?: string;
	update_content_manifest?: boolean;
	content_manifest?: string;
	metadata?: string;
	update_metadata?: boolean;
	language?: number;
	removed_kvtags?: string[];
	kvtags?: CMsgClientUCMUpdatePublishedFile_KeyValueTag[];
	previews?: CMsgClientUCMUpdatePublishedFile_AdditionalPreview[];
	previews_to_remove?: number[];
	clear_in_progress?: boolean;
	remove_all_kvtags?: boolean;
}

export interface CMsgClientUCMUpdatePublishedFile_AdditionalPreview {
	original_file_name?: string;
	internal_file_name?: string;
	videoid?: string;
	preview_type?: number;
	update_index?: number;
}

export interface CMsgClientUCMUpdatePublishedFile_KeyValueTag {
	key?: string;
	value?: string;
}

export interface CMsgClientUCMUpdatePublishedFileResponse {
	eresult?: EResult;
	needs_workshop_legal_agreement_acceptance?: boolean;
}

export interface CMsgClientUDSP2PSessionEnded {
	steamid_remote?: string;
	appid?: number;
	session_length_sec?: number;
	session_error?: number;
	nattype?: number;
	bytes_recv?: number;
	bytes_sent?: number;
	bytes_sent_relay?: number;
	bytes_recv_relay?: number;
	time_to_connect_ms?: number;
}

export interface CMsgClientUDSP2PSessionStarted {
	steamid_remote?: string;
	appid?: number;
}

export interface CMsgClientUFSDeleteFileRequest {
	app_id?: number;
	file_name?: string;
	is_explicit_delete?: boolean;
}

export interface CMsgClientUFSDeleteFileResponse {
	eresult?: EResult;
	file_name?: string;
}

export interface CMsgClientUFSDownloadRequest {
	app_id?: number;
	file_name?: string;
	can_handle_http?: boolean;
}

export interface CMsgClientUFSDownloadResponse {
	eresult?: EResult;
	app_id?: number;
	file_size?: number;
	raw_file_size?: number;
	sha_file?: Buffer;
	time_stamp?: string;
	is_explicit_delete?: boolean;
	use_http?: boolean;
	http_host?: string;
	http_url?: string;
	kv_headers?: Buffer;
	use_https?: boolean;
	encrypted?: boolean;
}

export interface CMsgClientUFSFileChunk {
	sha_file?: Buffer;
	file_start?: number;
	data?: Buffer;
}

export interface CMsgClientUFSGetFileListForApp {
	apps_to_query?: number[];
	send_path_prefixes?: boolean;
}

export interface CMsgClientUFSGetFileListForAppResponse {
	files?: CMsgClientUFSGetFileListForAppResponse_File[];
	path_prefixes?: string[];
}

export interface CMsgClientUFSGetFileListForAppResponse_File {
	app_id?: number;
	file_name?: string;
	sha_file?: Buffer;
	time_stamp?: string;
	raw_file_size?: number;
	is_explicit_delete?: boolean;
	platforms_to_sync?: number;
	path_prefix_index?: number;
}

export interface CMsgClientUFSGetSingleFileInfo {
	app_id?: number;
	file_name?: string;
}

export interface CMsgClientUFSGetSingleFileInfoResponse {
	eresult?: EResult;
	app_id?: number;
	file_name?: string;
	sha_file?: Buffer;
	time_stamp?: string;
	raw_file_size?: number;
	is_explicit_delete?: boolean;
}

export interface CMsgClientUFSGetUGCDetails {
	hcontent?: string;
}

export interface CMsgClientUFSGetUGCDetailsResponse {
	eresult?: EResult;
	url?: string;
	app_id?: number;
	filename?: string;
	steamid_creator?: string;
	file_size?: number;
	compressed_file_size?: number;
	rangecheck_host?: string;
	file_encoded_sha1?: string;
}

export interface CMsgClientUFSLoginRequest {
	protocol_version?: number;
	am_session_token?: string;
	apps?: number[];
}

export interface CMsgClientUFSLoginResponse {
	eresult?: EResult;
}

export interface CMsgClientUFSShareFile {
	app_id?: number;
	file_name?: string;
}

export interface CMsgClientUFSShareFileResponse {
	eresult?: EResult;
	hcontent?: string;
}

export interface CMsgClientUFSTransferHeartbeat {
}

export interface CMsgClientUFSUploadCommit {
	files?: CMsgClientUFSUploadCommit_File[];
}

export interface CMsgClientUFSUploadCommit_File {
	eresult?: EResult;
	app_id?: number;
	sha_file?: Buffer;
	cub_file?: number;
	file_name?: string;
}

export interface CMsgClientUFSUploadCommitResponse {
	files?: CMsgClientUFSUploadCommitResponse_File[];
}

export interface CMsgClientUFSUploadCommitResponse_File {
	eresult?: EResult;
	app_id?: number;
	sha_file?: Buffer;
}

export interface CMsgClientUFSUploadFileFinished {
	eresult?: EResult;
	sha_file?: Buffer;
}

export interface CMsgClientUFSUploadFileRequest {
	app_id?: number;
	file_size?: number;
	raw_file_size?: number;
	sha_file?: Buffer;
	time_stamp?: string;
	file_name?: string;
	platforms_to_sync_deprecated?: number;
	platforms_to_sync?: number;
	cell_id?: number;
	can_encrypt?: boolean;
}

export interface CMsgClientUFSUploadFileResponse {
	eresult?: EResult;
	sha_file?: Buffer;
	use_http?: boolean;
	http_host?: string;
	http_url?: string;
	kv_headers?: Buffer;
	use_https?: boolean;
	encrypt_file?: boolean;
}

export interface CMsgClientUGSGetGlobalStats {
	gameid?: string;
	history_days_requested?: number;
	time_last_requested?: number;
	first_day_cached?: number;
	days_cached?: number;
}

export interface CMsgClientUGSGetGlobalStatsResponse {
	eresult?: EResult;
	timestamp?: number;
	day_current?: number;
	days?: CMsgClientUGSGetGlobalStatsResponse_Day[];
}

export interface CMsgClientUGSGetGlobalStatsResponse_Day {
	day_id?: number;
	stats?: CMsgClientUGSGetGlobalStatsResponse_Day_Stat[];
}

export interface CMsgClientUGSGetGlobalStatsResponse_Day_Stat {
	stat_id?: number;
	data?: string;
}

export interface CMsgClientUIMode {
	uimode?: number;
	chat_mode?: number;
}

export interface CMsgClientUninstallClientApp {
	appid?: number;
}

export interface CMsgClientUninstallClientAppResponse {
	result?: EResult;
}

export interface CMsgClientUnsignedInstallScript {
	app_id?: number;
	file_name?: string;
	file_size?: number;
	signature_broken?: boolean;
	depot_id?: number;
	manifest_id?: string;
	file_flags?: number;
}

export interface CMsgClientUpdateAppJobReport {
	app_id?: number;
	depot_ids?: number[];
	app_state?: number;
	job_app_error?: number;
	error_details?: string;
	job_duration?: number;
	files_validation_failed?: number;
	job_bytes_downloaded?: string;
	job_bytes_staged?: string;
	bytes_comitted?: string;
	start_app_state?: number;
	stats_machine_id?: string;
	branch_name?: string;
	total_bytes_downloaded?: string;
	total_bytes_staged?: string;
	total_bytes_restored?: string;
	is_borrowed?: boolean;
	is_free_weekend?: boolean;
	total_bytes_legacy?: string;
	total_bytes_patched?: string;
	total_bytes_saved?: string;
	cell_id?: number;
}

export interface CMsgClientUpdateMachineAuth {
	filename?: string;
	offset?: number;
	cubtowrite?: number;
	bytes?: Buffer;
	otp_type?: number;
	otp_identifier?: string;
	otp_sharedsecret?: Buffer;
	otp_timedrift?: number;
}

export interface CMsgClientUpdateMachineAuthResponse {
	filename?: string;
	eresult?: EResult;
	filesize?: number;
	sha_file?: Buffer;
	getlasterror?: number;
	offset?: number;
	cubwrote?: number;
	otp_type?: number;
	otp_value?: number;
	otp_identifier?: string;
}

export interface CMsgClientUpdateUserGameInfo {
	steamid_idgs?: string;
	gameid?: string;
	game_ip?: number;
	game_port?: number;
	token?: Buffer;
}

export interface CMsgClientUseLocalDeviceAuthorizations {
	authorization_account_id?: number[];
	device_tokens?: CMsgClientUseLocalDeviceAuthorizations_DeviceToken[];
}

export interface CMsgClientUseLocalDeviceAuthorizations_DeviceToken {
	owner_account_id?: number;
	token_id?: string;
}

export interface CMsgClientUserNotifications {
	notifications?: CMsgClientUserNotifications_Notification[];
}

export interface CMsgClientUserNotifications_Notification {
	user_notification_type?: number;
	count?: number;
}

export interface CMsgClientVanityURLChangedNotification {
	vanity_url?: string;
}

export interface CMsgClientVoiceCallPreAuthorize {
	caller_steamid?: string;
	receiver_steamid?: string;
	caller_id?: number;
	hangup?: boolean;
}

export interface CMsgClientVoiceCallPreAuthorizeResponse {
	caller_steamid?: string;
	receiver_steamid?: string;
	eresult?: EResult;
	caller_id?: number;
}

export interface CMsgClientWalletInfoUpdate {
	has_wallet?: boolean;
	balance?: number;
	currency?: number;
	balance_delayed?: number;
	balance64?: string;
	balance64_delayed?: string;
}

export interface CMsgClientWorkshopItemChangesRequest {
	app_id?: number;
	last_time_updated?: number;
	num_items_needed?: number;
}

export interface CMsgClientWorkshopItemChangesResponse {
	eresult?: EResult;
	update_time?: number;
	workshop_items?: CMsgClientWorkshopItemChangesResponse_WorkshopItemInfo[];
}

export interface CMsgClientWorkshopItemChangesResponse_WorkshopItemInfo {
	published_file_id?: string;
	time_updated?: number;
	manifest_id?: string;
}

export interface CMsgClientWorkshopItemInfoRequest {
	app_id?: number;
	last_time_updated?: number;
	workshop_items?: CMsgClientWorkshopItemInfoRequest_WorkshopItem[];
}

export interface CMsgClientWorkshopItemInfoRequest_WorkshopItem {
	published_file_id?: string;
	time_updated?: number;
}

export interface CMsgClientWorkshopItemInfoResponse {
	eresult?: EResult;
	update_time?: number;
	workshop_items?: CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo[];
	private_items?: string[];
}

export interface CMsgClientWorkshopItemInfoResponse_WorkshopItemInfo {
	published_file_id?: string;
	time_updated?: number;
	manifest_id?: string;
	is_legacy?: boolean;
}

export interface CMsgCREGetUserPublishedItemVoteDetails {
	published_file_ids?: CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId[];
}

export interface CMsgCREGetUserPublishedItemVoteDetails_PublishedFileId {
	published_file_id?: string;
}

export interface CMsgCREGetUserPublishedItemVoteDetailsResponse {
	eresult?: EResult;
	user_item_vote_details?: CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail[];
}

export interface CMsgCREGetUserPublishedItemVoteDetailsResponse_UserItemVoteDetail {
	published_file_id?: string;
	vote?: number;
}

export interface CMsgCREItemVoteSummary {
	published_file_ids?: CMsgCREItemVoteSummary_PublishedFileId[];
}

export interface CMsgCREItemVoteSummary_PublishedFileId {
	published_file_id?: string;
}

export interface CMsgCREItemVoteSummaryResponse {
	eresult?: EResult;
	item_vote_summaries?: CMsgCREItemVoteSummaryResponse_ItemVoteSummary[];
}

export interface CMsgCREItemVoteSummaryResponse_ItemVoteSummary {
	published_file_id?: string;
	votes_for?: number;
	votes_against?: number;
	reports?: number;
	score?: number;
}

export interface CMsgCREUpdateUserPublishedItemVote {
	published_file_id?: string;
	vote_up?: boolean;
}

export interface CMsgCREUpdateUserPublishedItemVoteResponse {
	eresult?: EResult;
}

export interface CMsgDownloadRateStatistics {
	cell_id?: number;
	stats?: CMsgDownloadRateStatistics_StatsInfo[];
	throttling_kbps?: number;
	steam_realm?: number;
}

export interface CMsgDownloadRateStatistics_StatsInfo {
	source_type?: number;
	source_id?: number;
	seconds?: number;
	bytes?: string;
	host_name?: string;
	microseconds?: string;
	used_ipv6?: boolean;
	proxied?: boolean;
}

export interface CMsgDPGetNumberOfCurrentPlayers {
	appid?: number;
}

export interface CMsgDPGetNumberOfCurrentPlayersResponse {
	eresult?: EResult;
	player_count?: number;
}

export interface CMsgDRMDownloadRequestWithCrashData {
	download_flags?: number;
	download_types_known?: number;
	guid_drm?: Buffer;
	guid_split?: Buffer;
	guid_merge?: Buffer;
	module_name?: string;
	module_path?: string;
	crash_data?: Buffer;
}

export interface CMsgDRMDownloadResponse {
	eresult?: EResult;
	app_id?: number;
	blob_download_type?: number;
	merge_guid?: Buffer;
	download_file_dfs_ip?: number;
	download_file_dfs_port?: number;
	download_file_url?: string;
	module_path?: string;
}

export interface CMsgDRMFinalResult {
	eResult?: EResult;
	app_id?: number;
	blob_download_type?: number;
	error_detail?: number;
	merge_guid?: Buffer;
	download_file_dfs_ip?: number;
	download_file_dfs_port?: number;
	download_file_url?: string;
}

export interface CMsgFSEnumerateFollowingList {
	start_index?: number;
}

export interface CMsgFSEnumerateFollowingListResponse {
	eresult?: EResult;
	total_results?: number;
	steam_ids?: string[];
}

export interface CMsgFSGetFollowerCount {
	steam_id?: string;
}

export interface CMsgFSGetFollowerCountResponse {
	eresult?: EResult;
	count?: number;
}

export interface CMsgFSGetIsFollowing {
	steam_id?: string;
}

export interface CMsgFSGetIsFollowingResponse {
	eresult?: EResult;
	is_following?: boolean;
}

export interface CMsgGameServerData {
	steam_id_gs?: string;
	deprecated_ip?: number;
	query_port?: number;
	game_port?: number;
	sourcetv_port?: number;
	app_id?: number;
	gamedir?: string;
	version?: string;
	product?: string;
	region?: string;
	players?: CMsgGameServerData_Player[];
	max_players?: number;
	bot_count?: number;
	password?: boolean;
	secure?: boolean;
	dedicated?: boolean;
	os?: string;
	game_data?: string;
	game_data_version?: number;
	game_type?: string;
	map?: string;
	name?: string;
	game_ip_address?: CMsgIPAddress;
}

export interface CMsgGameServerData_Player {
	steam_id?: string;
}

export interface CMsgGameServerOutOfDate {
	steam_id_gs?: string;
	reject?: boolean;
	message?: string;
}

export interface CMsgGameServerPingSample {
	my_ip?: number;
	gs_app_id?: number;
	gs_samples?: CMsgGameServerPingSample_Sample[];
}

export interface CMsgGameServerPingSample_Sample {
	ip?: number;
	avg_ping_ms?: number;
	stddev_ping_ms_x10?: number;
}

export interface CMsgGameServerRemove {
	steam_id?: string;
	deprecated_ip?: number;
	query_port?: number;
	ip?: CMsgIPAddress;
}

export interface CMsgGCClient {
	appid?: number;
	msgtype?: number;
	payload?: Buffer;
	steamid?: string;
	gcname?: string;
	ip?: number;
}

export interface CMsgGCRoutingProtoBufHeader {
	dst_gcid_queue?: string;
	dst_gc_dir_index?: number;
}

export interface CMsgGMSClientServerQueryResponse {
	servers?: CMsgGMSClientServerQueryResponse_Server[];
	error?: string;
}

export interface CMsgGMSClientServerQueryResponse_Server {
	deprecated_server_ip?: number;
	server_port?: number;
	auth_players?: number;
	server_ip?: CMsgIPAddress;
}

export interface CMsgGSApprove {
	steam_id?: string;
	owner_steam_id?: string;
}

export interface CMsgGSAssociateWithClan {
	steam_id_clan?: string;
}

export interface CMsgGSAssociateWithClanResponse {
	steam_id_clan?: string;
	eresult?: EResult;
}

export interface CMsgGSComputeNewPlayerCompatibility {
	steam_id_candidate?: string;
}

export interface CMsgGSComputeNewPlayerCompatibilityResponse {
	steam_id_candidate?: string;
	eresult?: EResult;
	is_clan_member?: boolean;
	ct_dont_like_you?: number;
	ct_you_dont_like?: number;
	ct_clanmembers_dont_like_you?: number;
}

export interface CMsgGSDeny {
	steam_id?: string;
	edeny_reason?: number;
	deny_string?: string;
}

export interface CMsgGSDisconnectNotice {
	steam_id?: string;
}

export interface CMsgGSKick {
	steam_id?: string;
	edeny_reason?: number;
}

export interface CMsgGSPlayerList {
	players?: CMsgGSPlayerList_Player[];
}

export interface CMsgGSPlayerList_Player {
	steam_id?: string;
	deprecated_public_ip?: number;
	token?: Buffer;
	public_ip?: CMsgIPAddress;
}

export interface CMsgGSServerType {
	app_id_served?: number;
	flags?: number;
	deprecated_game_ip_address?: number;
	game_port?: number;
	game_dir?: string;
	game_version?: string;
	game_query_port?: number;
}

export interface CMsgGSStatusReply {
	is_secure?: boolean;
}

export interface CMsgGSUserPlaying {
	steam_id?: string;
	deprecated_public_ip?: number;
	token?: Buffer;
	public_ip?: CMsgIPAddress;
}

export interface CMsgIPAddress {
	v4?: number;
	v6?: Buffer;
}

export interface CMsgIPAddressBucket {
	original_ip_address?: CMsgIPAddress;
	bucket?: string;
}

export interface CMsgMobileChatFriendMessage {
	steamid_friend?: string;
	local_echo?: boolean;
	chat_entry_type?: number;
	message?: string;
	current_message_timestamp?: number;
	current_message_ordinal?: number;
	previous_message_timestamp?: number;
	previous_message_ordinal?: number;
	client_message_id?: string;
}

export interface CMsgMulti {
	size_unzipped?: number;
	message_body?: Buffer;
}

export interface CMsgPersonaChangeResponse {
	result?: EResult;
	player_name?: string;
}

export interface CMsgProtoBufHeader {
	steamid?: string;
	client_sessionid?: number;
	routing_appid?: number;
	jobid_source?: string;
	jobid_target?: string;
	target_job_name?: string;
	eresult?: EResult;
	error_message?: string;
	ip?: number;
	auth_account_flags?: number;
	transport_error?: number;
	messageid?: string;
	publisher_group_id?: number;
	sysid?: number;
	trace_tag?: string;
	token_source?: number;
	admin_spoofing_user?: boolean;
	seq_num?: number;
	webapi_key_id?: number;
	is_from_external_source?: boolean;
	forward_to_sysid?: number[];
	cm_sysid?: number;
	ip_v6?: Buffer;
	wg_token?: string;
	launcher_type?: number;
	realm?: number;
	timeout_ms?: number;
	debug_source?: string;
	debug_source_string_index?: number;
	token_id?: string;
	routing_gc?: CMsgGCRoutingProtoBufHeader;
	session_disposition?: number;
	wg_token__field_39?: string;
	webui_auth_key?: string;
	exclude_client_sessionids?: number[];
}

export interface CMsgProtobufWrapped {
	message_body?: Buffer;
}

export interface CMsgTrading_CancelTradeRequest {
	other_steamid?: string;
}

export interface CMsgTrading_InitiateTradeRequest {
	trade_request_id?: number;
	other_steamid?: string;
	other_name?: string;
}

export interface CMsgTrading_InitiateTradeResponse {
	response?: number;
	trade_request_id?: number;
	other_steamid?: string;
	steamguard_required_days?: number;
	new_device_cooldown_days?: number;
	default_password_reset_probation_days?: number;
	password_reset_probation_days?: number;
	default_email_change_probation_days?: number;
	email_change_probation_days?: number;
}

export interface CMsgTrading_StartSession {
	other_steamid?: string;
}

export interface CProductImpressionsFromClient_Notification {
	impressions?: CProductImpressionsFromClient_Notification_Impression[];
}

export interface CProductImpressionsFromClient_Notification_Impression {
	type?: number;
	appid?: number;
	num_impressions?: number;
}

export interface CSteamNotification_HideNotification_Notification {
	notification_ids?: string[];
}

export interface CSteamNotification_MarkNotificationsRead_Notification {
	timestamp?: number;
	notification_type?: number;
	notification_ids?: string[];
	mark_all_read?: boolean;
}

export interface CSteamNotification_MarkNotificationsViewed_Notification {
}

export interface CSteamVR_Header {
	type?: number;
	id?: number;
}

export interface CSteamVR_VoiceChat_Active_Notification {
}

export interface CSteamVR_VoiceChat_ConfigureVideo_Request {
	send?: boolean;
	receive?: boolean;
}

export interface CSteamVR_VoiceChat_ConfigureVideo_Response {
}

export interface CSteamVR_VoiceChat_ExitRoomChat_Request {
	chat_group_id?: string;
	chat_room_id?: string;
}

export interface CSteamVR_VoiceChat_ExitRoomChat_Response {
}

export interface CSteamVR_VoiceChat_GetAvatarUrl_Request {
	profile_steamid?: string;
	avatar_type?: number;
}

export interface CSteamVR_VoiceChat_GetAvatarUrl_Response {
	profile_avatar_url?: string;
}

export interface CSteamVR_VoiceChat_GroupName_Notification {
	name?: string;
}

export interface CSteamVR_VoiceChat_Inactive_Notification {
}

export interface CSteamVR_VoiceChat_InitiateRoomChat_Request {
	chat_group_id?: string;
	chat_room_id?: string;
}

export interface CSteamVR_VoiceChat_InitiateRoomChat_Response {
}

export interface CSteamVR_VoiceChat_NewGroupChatMsgAdded_Notification {
	chat_group_id?: string;
	chat_room_id?: string;
	sender_accountid?: number;
	timestamp?: number;
	ordinal?: number;
	message?: string;
}

export interface CSteamVR_VoiceChat_PerUserGainValue_Notification {
	accountid?: number;
	muted?: boolean;
	gain?: number;
}

export interface CSteamVR_VoiceChat_PerUserVoiceStatus_Notification {
	accountid?: number;
	mic_muted_locally?: boolean;
	output_muted_locally?: boolean;
}

export interface CSteamVR_VoiceChat_SendGroupChatMessage_Request {
	message_with_bbcode?: string;
}

export interface CSteamVR_VoiceChat_SendGroupChatMessage_Response {
}

export interface CSteamVR_VoiceChat_SetDefaultSession_Notification {
	chat_group_id?: string;
	chat_room_id?: string;
}

export interface CSteamVR_VoiceChat_SetPerUserMuting_Request {
	accountid?: number;
	muted?: boolean;
}

export interface CSteamVR_VoiceChat_SetPerUserMuting_Response {
}

export interface CSteamVR_WebRTC_Active_Notification {
}

export interface CSteamVR_WebRTC_CloseDataChannel_Request {
	channel_id?: number;
}

export interface CSteamVR_WebRTC_CloseDataChannel_Response {
}

export interface CSteamVR_WebRTC_CreateDataChannel_Request {
	label?: string;
	ordered?: boolean;
	max_retransmits?: number;
	max_packet_life_time?: number;
}

export interface CSteamVR_WebRTC_CreateDataChannel_Response {
	channel_id?: number;
}

export interface CSteamVR_WebRTC_DataChannel_Close_Notification {
	channel_id?: number;
}

export interface CSteamVR_WebRTC_DataChannel_Error_Notification {
	channel_id?: number;
	reason?: string;
}

export interface CSteamVR_WebRTC_DataChannel_Message_Notification {
	channel_id?: number;
	data?: Buffer;
}

export interface CSteamVR_WebRTC_DataChannel_Open_Notification {
	channel_id?: number;
}

export interface CSteamVR_WebRTC_Inactive_Notification {
}

export interface CSteamVR_WebRTC_OnDataChannel_Notification {
	source_steamid?: string;
	channel_id?: number;
	label?: string;
}

export interface CStore_MigratePartnerLinkTracking_Notification {
	accountid?: number;
	browserid?: string;
	backfill_source?: number;
}

export interface CStore_ReloadAllReservationPositionMessages_Notification {
}

export interface CStoreBrowse_GetItems_Request {
	ids?: StoreItemID[];
	context?: StoreBrowseContext;
	data_request?: StoreBrowseItemDataRequest;
}

export interface CStoreBrowse_GetItems_Response {
	store_items?: StoreItem[];
}

export interface CStorePageFilter {
	sale_filter?: CStorePageFilter_SalePageFilter;
	content_hub_filter?: CStorePageFilter_ContentHubFilter;
	store_filters?: CStorePageFilter_StoreFilter[];
}

export interface CStorePageFilter_ContentHubFilter {
	hub_type?: string;
	hub_category?: string;
	hub_tagid?: number;
	discount_filter?: number;
	optin?: CStorePageFilter_ContentHubFilter_OptInInfo;
}

export interface CStorePageFilter_ContentHubFilter_OptInInfo {
	name?: string;
	optin_tagid?: number;
	prune_tagid?: number;
	optin_only?: boolean;
}

export interface CStorePageFilter_SalePageFilter {
	sale_tagid?: number;
}

export interface CStorePageFilter_StoreFilter {
	filter_json?: string;
	cache_key?: string;
}

export interface EncryptedAppTicket {
	ticket_version_no?: number;
	crc_encryptedticket?: number;
	cb_encrypteduserdata?: number;
	cb_encrypted_appownershipticket?: number;
	encrypted_ticket?: Buffer;
}

export interface LoyaltyRewardDefinition {
	appid?: number;
	defid?: number;
	type?: number;
	community_item_class?: number;
	community_item_type?: number;
	point_cost?: string;
	timestamp_created?: number;
	timestamp_updated?: number;
	timestamp_available?: number;
	quantity?: string;
	internal_description?: string;
	active?: boolean;
	community_item_data?: LoyaltyRewardDefinition_CommunityItemData;
	timestamp_available_end?: number;
	bundle_defids?: number[];
	usable_duration?: number;
	bundle_discount?: number;
}

export interface LoyaltyRewardDefinition_BadgeData {
	level?: number;
	image?: string;
}

export interface LoyaltyRewardDefinition_CommunityItemData {
	item_name?: string;
	item_title?: string;
	item_description?: string;
	item_image_small?: string;
	item_image_large?: string;
	item_movie_webm?: string;
	item_movie_mp4?: string;
	animated?: boolean;
	badge_data?: LoyaltyRewardDefinition_BadgeData[];
	item_movie_webm_small?: string;
	item_movie_mp4_small?: string;
	profile_theme_id?: string;
}

export interface StoreBrowseContext {
	language?: string;
	elanguage?: number;
	country_code?: string;
	steam_realm?: number;
}

export interface StoreBrowseItemDataRequest {
	include_assets?: boolean;
	include_release?: boolean;
	include_platforms?: boolean;
	include_all_purchase_options?: boolean;
	include_screenshots?: boolean;
	include_trailers?: boolean;
	include_ratings?: boolean;
	include_tag_count?: number;
	include_reviews?: boolean;
	include_basic_info?: boolean;
	include_supported_languages?: boolean;
	include_full_description?: boolean;
	include_included_items?: boolean;
	included_item_data_request?: StoreBrowseItemDataRequest;
}

export interface StoreGameRating {
	type?: string;
	rating?: string;
	descriptors?: string[];
	interactive_elements?: string;
	required_age?: number;
	use_age_gate?: boolean;
	image_url?: string;
	image_target?: string;
}

export interface StoreItem {
	item_type?: number;
	id?: number;
	success?: number;
	visible?: boolean;
	unvailable_for_country_restriction?: boolean;
	name?: string;
	store_url_path?: string;
	appid?: number;
	type?: number;
	included_types?: number[];
	included_appids?: number[];
	is_free?: boolean;
	is_early_access?: boolean;
	related_items?: StoreItem_RelatedItems;
	included_items?: StoreItem_IncludedItems;
	content_descriptorids?: number[];
	tagids?: number[];
	categories?: StoreItem_Categories;
	reviews?: StoreItem_Reviews;
	basic_info?: StoreItem_BasicInfo;
	tags?: StoreItem_Tag[];
	assets?: StoreItem_Assets;
	release?: StoreItem_ReleaseInfo;
	platforms?: StoreItem_Platforms;
	game_rating?: StoreGameRating;
	best_purchase_option?: StoreItem_PurchaseOption;
	purchase_options?: StoreItem_PurchaseOption[];
	accessories?: StoreItem_PurchaseOption[];
	screenshots?: StoreItem_Screenshots;
	trailers?: StoreItem_Trailers;
	supported_languages?: StoreItem_SupportedLanguage[];
	store_url_path_override?: string;
	free_weekend?: StoreItem_FreeWeekend;
	unlisted?: boolean;
	game_count?: number;
	internal_name?: string;
	full_description?: string;
	is_free_temporarily?: boolean;
}

export interface StoreItem_Assets {
	asset_url_format?: string;
	main_capsule?: string;
	small_capsule?: string;
	header?: string;
	package_header?: string;
	page_background?: string;
	hero_capsule?: string;
	hero_capsule_2x?: string;
	library_capsule?: string;
	library_capsule_2x?: string;
	library_hero?: string;
	library_hero_2x?: string;
	community_icon?: string;
	clan_avatar?: string;
}

export interface StoreItem_BasicInfo {
	short_description?: string;
	publishers?: StoreItem_BasicInfo_CreatorHomeLink[];
	developers?: StoreItem_BasicInfo_CreatorHomeLink[];
	franchises?: StoreItem_BasicInfo_CreatorHomeLink[];
	capsule_headline?: string;
}

export interface StoreItem_BasicInfo_CreatorHomeLink {
	name?: string;
	creator_clan_account_id?: number;
}

export interface StoreItem_Categories {
	supported_player_categoryids?: number[];
	feature_categoryids?: number[];
	controller_categoryids?: number[];
}

export interface StoreItem_FreeWeekend {
	start_time?: number;
	end_time?: number;
	text?: string;
}

export interface StoreItem_IncludedItems {
	included_apps?: StoreItem[];
	included_packages?: StoreItem[];
}

export interface StoreItem_Platforms {
	windows?: boolean;
	mac?: boolean;
	linux?: boolean;
	vr_support?: StoreItem_Platforms_VRSupport;
	steam_deck_compat_category?: number;
}

export interface StoreItem_Platforms_VRSupport {
	vrhmd?: boolean;
	vrhmd_only?: boolean;
	htc_vive?: boolean;
	oculus_rift?: boolean;
	windows_mr?: boolean;
	valve_index?: boolean;
}

export interface StoreItem_PurchaseOption {
	packageid?: number;
	bundleid?: number;
	purchase_option_name?: string;
	final_price_in_cents?: string;
	original_price_in_cents?: string;
	user_final_price_in_cents?: string;
	formatted_final_price?: string;
	formatted_original_price?: string;
	discount_pct?: number;
	user_discount_pct?: number;
	bundle_discount_pct?: number;
	active_discounts?: StoreItem_PurchaseOption_Discount[];
	user_active_discounts?: StoreItem_PurchaseOption_Discount[];
	inactive_discounts?: StoreItem_PurchaseOption_Discount[];
	user_can_purchase?: boolean;
	user_can_purchase_as_gift?: boolean;
	is_commercial_license?: boolean;
	should_suppress_discount_pct?: boolean;
	hide_discount_pct_for_compliance?: boolean;
	included_game_count?: number;
	lowest_recent_price_in_cents?: string;
}

export interface StoreItem_PurchaseOption_Discount {
	discount_amount?: string;
	discount_description?: string;
	discount_end_date?: number;
}

export interface StoreItem_RelatedItems {
	parent_appid?: number;
}

export interface StoreItem_ReleaseInfo {
	steam_release_date?: number;
	original_release_date?: number;
	original_steam_release_date?: number;
	is_coming_soon?: boolean;
	is_preload?: boolean;
	custom_release_date_message?: string;
	is_abridged_release_date?: boolean;
	coming_soon_display?: string;
	is_early_access?: boolean;
	mac_release_date?: number;
	linux_release_date?: number;
}

export interface StoreItem_Reviews {
	summary_filtered?: StoreItem_Reviews_StoreReviewSummary;
	summary_unfiltered?: StoreItem_Reviews_StoreReviewSummary;
}

export interface StoreItem_Reviews_StoreReviewSummary {
	review_count?: number;
	percent_positive?: number;
	review_score?: number;
	review_score_label?: string;
}

export interface StoreItem_Screenshots {
	all_ages_screenshots?: StoreItem_Screenshots_Screenshot[];
	mature_content_screenshots?: StoreItem_Screenshots_Screenshot[];
}

export interface StoreItem_Screenshots_Screenshot {
	filename?: string;
	ordinal?: number;
}

export interface StoreItem_SupportedLanguage {
	elanguage?: number;
	supported?: boolean;
	full_audio?: boolean;
	subtitles?: boolean;
}

export interface StoreItem_Tag {
	tagid?: number;
	weight?: number;
}

export interface StoreItem_Trailers {
	highlights?: StoreItem_Trailers_Trailer[];
	other_trailers?: StoreItem_Trailers_Trailer[];
}

export interface StoreItem_Trailers_Trailer {
	trailer_name?: string;
	trailer_url_format?: string;
	trailer_480p?: StoreItem_Trailers_VideoSource[];
	trailer_max?: StoreItem_Trailers_VideoSource[];
	microtrailer?: StoreItem_Trailers_VideoSource[];
	screenshot_medium?: string;
	screenshot_full?: string;
	trailer_base_id?: number;
}

export interface StoreItem_Trailers_VideoSource {
	filename?: string;
	type?: string;
}

export interface StoreItemID {
	appid?: number;
	packageid?: number;
	bundleid?: number;
	tagid?: number;
	creatorid?: number;
	hubcategoryid?: number;
}

export interface UserContentDescriptorPreferences {
	content_descriptors_to_exclude?: UserContentDescriptorPreferences_ContentDescriptor[];
}

export interface UserContentDescriptorPreferences_ContentDescriptor {
	content_descriptorid?: number;
	timestamp_added?: number;
}

export interface NoResponse {
}

export interface NotImplemented {
}

///////////////////////////////////////////////
// common_base.proto
///////////////////////////////////////////////

///////////////////////////////////////////////
// custom.proto
///////////////////////////////////////////////

export interface CAuthentication_BeginAuthSessionViaCredentials_Request_BinaryGuardData {
	device_friendly_name?: string;
	account_name?: string;
	encrypted_password?: string;
	encryption_timestamp?: string;
	remember_login?: boolean;
	platform_type?: EAuthTokenPlatformType;
	persistence?: ESessionPersistence;
	website_id?: string;
	device_details?: CAuthentication_DeviceDetails;
	guard_data?: Buffer;
	language?: number;
	qos_level?: number;
}

export interface CCDDBAppDetailCommon {
	appid?: number;
	name?: string;
	icon?: string;
	tool?: boolean;
	demo?: boolean;
	media?: boolean;
	community_visible_stats?: boolean;
	friendly_name?: string;
	propagation?: string;
	has_adult_content?: boolean;
	is_visible_in_steam_china?: boolean;
	app_type?: number;
	has_adult_content_sex?: boolean;
	has_adult_content_violence?: boolean;
	content_descriptorids?: number[];
}

export interface CClanEventUserNewsTuple {
	clanid?: number;
	event_gid?: string;
	announcement_gid?: string;
	rtime_start?: number;
	rtime_end?: number;
	priority_score?: number;
	type?: number;
	clamp_range_slot?: number;
	appid?: number;
	rtime32_last_modified?: number;
}

export interface CClanMatchEventByRange {
	rtime_before?: number;
	rtime_after?: number;
	qualified?: number;
	events?: CClanEventUserNewsTuple[];
}

export interface CPackageReservationStatus {
	packageid?: number;
	reservation_state?: number;
	queue_position?: number;
	total_queue_size?: number;
	reservation_country_code?: string;
	expired?: boolean;
	time_expires?: number;
	time_reserved?: number;
}

export interface CMsgKeyValuePair {
	name?: string;
	value?: string;
}

export interface CMsgKeyValueSet {
	pairs?: CMsgKeyValuePair[];
}

export interface CAuthentication_GetPasswordRSAPublicKey_Request {
	account_name?: string;
}

export interface CAuthentication_GetPasswordRSAPublicKey_Response {
	publickey_mod?: string;
	publickey_exp?: string;
	timestamp?: string;
}

export interface CAuthentication_DeviceDetails {
	device_friendly_name?: string;
	platform_type?: EAuthTokenPlatformType;
	os_type?: number;
	gaming_device_type?: number;
	client_count?: number;
	machine_id?: Buffer;
}

export interface CAuthentication_BeginAuthSessionViaQR_Request {
	device_friendly_name?: string;
	platform_type?: EAuthTokenPlatformType;
	device_details?: CAuthentication_DeviceDetails;
	website_id?: string;
}

export interface CAuthentication_AllowedConfirmation {
	confirmation_type?: EAuthSessionGuardType;
	associated_message?: string;
}

export interface CAuthentication_BeginAuthSessionViaQR_Response {
	client_id?: string;
	challenge_url?: string;
	request_id?: Buffer;
	interval?: number;
	allowed_confirmations?: CAuthentication_AllowedConfirmation[];
	version?: number;
}

export interface CAuthentication_BeginAuthSessionViaCredentials_Request {
	device_friendly_name?: string;
	account_name?: string;
	encrypted_password?: string;
	encryption_timestamp?: string;
	remember_login?: boolean;
	platform_type?: EAuthTokenPlatformType;
	persistence?: ESessionPersistence;
	website_id?: string;
	device_details?: CAuthentication_DeviceDetails;
	guard_data?: string;
	language?: number;
	qos_level?: number;
}

export interface CAuthentication_BeginAuthSessionViaCredentials_Response {
	client_id?: string;
	request_id?: Buffer;
	interval?: number;
	allowed_confirmations?: CAuthentication_AllowedConfirmation[];
	steamid?: string;
	weak_token?: string;
	agreement_session_url?: string;
	extended_error_message?: string;
}

export interface CAuthentication_PollAuthSessionStatus_Request {
	client_id?: string;
	request_id?: Buffer;
	token_to_revoke?: string;
}

export interface CAuthentication_PollAuthSessionStatus_Response {
	new_client_id?: string;
	new_challenge_url?: string;
	refresh_token?: string;
	access_token?: string;
	had_remote_interaction?: boolean;
	account_name?: string;
	new_guard_data?: string;
	agreement_session_url?: string;
}

export interface CAuthentication_GetAuthSessionInfo_Request {
	client_id?: string;
}

export interface CAuthentication_GetAuthSessionInfo_Response {
	ip?: string;
	geoloc?: string;
	city?: string;
	state?: string;
	country?: string;
	platform_type?: EAuthTokenPlatformType;
	device_friendly_name?: string;
	version?: number;
	login_history?: EAuthSessionSecurityHistory;
	requestor_location_mismatch?: boolean;
	high_usage_login?: boolean;
	requested_persistence?: ESessionPersistence;
}

export interface CAuthentication_UpdateAuthSessionWithMobileConfirmation_Request {
	version?: number;
	client_id?: string;
	steamid?: string;
	signature?: Buffer;
	confirm?: boolean;
	persistence?: ESessionPersistence;
}

export interface CAuthentication_UpdateAuthSessionWithMobileConfirmation_Response {
}

export interface CAuthentication_UpdateAuthSessionWithSteamGuardCode_Request {
	client_id?: string;
	steamid?: string;
	code?: string;
	code_type?: EAuthSessionGuardType;
}

export interface CAuthentication_UpdateAuthSessionWithSteamGuardCode_Response {
	agreement_session_url?: string;
}

export interface CAuthentication_AccessToken_GenerateForApp_Request {
	refresh_token?: string;
	steamid?: string;
	renewal_type?: ETokenRenewalType;
}

export interface CAuthentication_AccessToken_GenerateForApp_Response {
	access_token?: string;
	refresh_token?: string;
}

export interface CAuthentication_RefreshToken_Enumerate_Request {
}

export interface CAuthentication_RefreshToken_Enumerate_Response {
	refresh_tokens?: CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription[];
	requesting_token?: string;
}

export interface CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent {
	time?: number;
	ip?: CMsgIPAddress;
	locale?: string;
	country?: string;
	state?: string;
	city?: string;
}

export interface CAuthentication_RefreshToken_Enumerate_Response_RefreshTokenDescription {
	token_id?: string;
	token_description?: string;
	time_updated?: number;
	platform_type?: EAuthTokenPlatformType;
	logged_in?: boolean;
	os_platform?: number;
	auth_type?: number;
	gaming_device_type?: number;
	first_seen?: CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent;
	last_seen?: CAuthentication_RefreshToken_Enumerate_Response_TokenUsageEvent;
	os_type?: number;
}

export interface CAuthentication_GetAuthSessionsForAccount_Request {
}

export interface CAuthentication_GetAuthSessionsForAccount_Response {
	client_ids?: string[];
}

export interface CAuthentication_MigrateMobileSession_Request {
	steamid?: string;
	token?: string;
	signature?: string;
}

export interface CAuthentication_MigrateMobileSession_Response {
	refresh_token?: string;
	access_token?: string;
}

export interface CAuthentication_Token_Revoke_Request {
	token?: string;
	revoke_action?: EAuthTokenRevokeAction;
}

export interface CAuthentication_Token_Revoke_Response {
}

export interface CAuthentication_RefreshToken_Revoke_Request {
	token_id?: string;
	steamid?: string;
	revoke_action?: EAuthTokenRevokeAction;
	signature?: Buffer;
}

export interface CAuthentication_RefreshToken_Revoke_Response {
}

export interface CAuthenticationSupport_QueryRefreshTokensByAccount_Request {
	steamid?: string;
	include_revoked_tokens?: boolean;
}

export interface CSupportRefreshTokenDescription {
	token_id?: string;
	token_description?: string;
	time_updated?: number;
	platform_type?: EAuthTokenPlatformType;
	token_state?: EAuthTokenState;
	owner_steamid?: string;
	os_platform?: number;
	os_type?: number;
	auth_type?: number;
	gaming_device_type?: number;
	first_seen?: CSupportRefreshTokenDescription_TokenUsageEvent;
	last_seen?: CSupportRefreshTokenDescription_TokenUsageEvent;
}

export interface CSupportRefreshTokenDescription_TokenUsageEvent {
	time?: number;
	ip?: CMsgIPAddress;
	country?: string;
	state?: string;
	city?: string;
}

export interface CAuthenticationSupport_QueryRefreshTokensByAccount_Response {
	refresh_tokens?: CSupportRefreshTokenDescription[];
	last_token_reset?: number;
}

export interface CAuthenticationSupport_QueryRefreshTokenByID_Request {
	token_id?: string;
}

export interface CAuthenticationSupport_QueryRefreshTokenByID_Response {
	refresh_tokens?: CSupportRefreshTokenDescription[];
}

export interface CAuthenticationSupport_RevokeToken_Request {
	token_id?: string;
	steamid?: string;
}

export interface CAuthenticationSupport_RevokeToken_Response {
}

export interface CAuthenticationSupport_GetTokenHistory_Request {
	token_id?: string;
}

export interface CSupportRefreshTokenAudit {
	action?: number;
	time?: number;
	ip?: CMsgIPAddress;
	actor?: string;
}

export interface CAuthenticationSupport_GetTokenHistory_Response {
	history?: CSupportRefreshTokenAudit[];
}

export interface CCloudGaming_CreateNonce_Request {
	platform?: string;
	appid?: number;
}

export interface CCloudGaming_CreateNonce_Response {
	nonce?: string;
	expiry?: number;
}

export interface CCloudGaming_GetTimeRemaining_Request {
	platform?: string;
	appid_list?: number[];
}

export interface CCloudGaming_TimeRemaining {
	appid?: number;
	minutes_remaining?: number;
}

export interface CCloudGaming_GetTimeRemaining_Response {
	entries?: CCloudGaming_TimeRemaining[];
}

export interface Authentication {
}

export interface AuthenticationSupport {
}

export interface CloudGaming {
}

///////////////////////////////////////////////
// enums.proto
///////////////////////////////////////////////

///////////////////////////////////////////////
// service_loyaltyrewards.proto
///////////////////////////////////////////////

export interface CLoyaltyRewards_AddReaction_Request {
	target_type?: number;
	targetid?: string;
	reactionid?: number;
}

export interface CLoyaltyRewards_AddReaction_Response {
}

export interface CLoyaltyRewards_BatchedQueryRewardItems_Request {
	requests?: CLoyaltyRewards_QueryRewardItems_Request[];
}

export interface CLoyaltyRewards_BatchedQueryRewardItems_Response {
	responses?: CLoyaltyRewards_BatchedQueryRewardItems_Response_Response[];
}

export interface CLoyaltyRewards_BatchedQueryRewardItems_Response_Response {
	eresult?: EResult;
	response?: CLoyaltyRewards_QueryRewardItems_Response;
}

export interface CLoyaltyRewards_GetActivePurchaseBonuses_Request {
}

export interface CLoyaltyRewards_GetActivePurchaseBonuses_Response {
	bonuses?: LoyaltyRewardPurchaseBonus[];
}

export interface CLoyaltyRewards_GetEligibleApps_Request {
}

export interface CLoyaltyRewards_GetEligibleApps_Response {
	apps?: CLoyaltyRewards_GetEligibleApps_Response_EligibleApp[];
}

export interface CLoyaltyRewards_GetEligibleApps_Response_EligibleApp {
	appid?: number;
	has_items_anyone_can_purchase?: boolean;
	event_app?: boolean;
	hero_carousel_image?: string;
}

export interface CLoyaltyRewards_GetEquippedProfileItems_Request {
	steamid?: string;
	language?: string;
}

export interface CLoyaltyRewards_GetEquippedProfileItems_Response {
	active_definitions?: LoyaltyRewardDefinition[];
	inactive_definitions?: LoyaltyRewardDefinition[];
	bundle_definitions?: LoyaltyRewardDefinition[];
}

export interface CLoyaltyRewards_GetPointsForSpend_Request {
	amount?: string;
	ecurrency?: number;
}

export interface CLoyaltyRewards_GetPointsForSpend_Response {
	points?: string;
}

export interface CLoyaltyRewards_GetProfileCustomizationsConfig_Request {
}

export interface CLoyaltyRewards_GetProfileCustomizationsConfig_Response {
	points_cost?: number;
	upgrade_points_cost?: number;
	purchasable_customization_types?: number[];
	upgradable_customization_types?: number[];
	max_slots_per_type?: number;
	max_upgradable_level?: number;
}

export interface CLoyaltyRewards_GetReactionConfig_Request {
}

export interface CLoyaltyRewards_GetReactionConfig_Response {
	reactions?: CLoyaltyRewards_GetReactionConfig_Response_ReactionConfig[];
}

export interface CLoyaltyRewards_GetReactionConfig_Response_ReactionConfig {
	reactionid?: number;
	points_cost?: number;
	points_transferred?: number;
	valid_target_types?: number[];
	valid_ugc_types?: number[];
}

export interface CLoyaltyRewards_GetReactions_Request {
	target_type?: number;
	targetid?: string;
}

export interface CLoyaltyRewards_GetReactions_Response {
	reactionids?: number[];
}

export interface CLoyaltyRewards_GetReactionsSummaryForUser_Request {
	steamid?: string;
}

export interface CLoyaltyRewards_GetReactionsSummaryForUser_Response {
	total?: CLoyaltyRewards_GetReactionsSummaryForUser_Response_Breakdown[];
	user_reviews?: CLoyaltyRewards_GetReactionsSummaryForUser_Response_Breakdown[];
	ugc?: CLoyaltyRewards_GetReactionsSummaryForUser_Response_Breakdown[];
	profile?: CLoyaltyRewards_GetReactionsSummaryForUser_Response_Breakdown[];
	forum_topics?: CLoyaltyRewards_GetReactionsSummaryForUser_Response_Breakdown[];
	comments?: CLoyaltyRewards_GetReactionsSummaryForUser_Response_Breakdown[];
	total_points_given?: string;
	total_points_received?: string;
	total_points_given__field_9?: string;
	total_points_received__field_10?: string;
}

export interface CLoyaltyRewards_GetReactionsSummaryForUser_Response_Breakdown {
	reactionid?: number;
	given?: number;
	received?: number;
	points_given?: string;
	points_received?: string;
}

export interface CLoyaltyRewards_GetSummary_Request {
	steamid?: string;
}

export interface CLoyaltyRewards_GetSummary_Response {
	summary?: CLoyaltyRewards_GetSummary_Response_Summary;
	timestamp_updated?: number;
	auditid_highwater?: string;
}

export interface CLoyaltyRewards_GetSummary_Response_Summary {
	points?: string;
	points_earned?: string;
	points_spent?: string;
}

export interface CLoyaltyRewards_QueryRewardItems_Request {
	appids?: number[];
	time_available?: number;
	community_item_classes?: number[];
	language?: string;
	count?: number;
	cursor?: string;
	sort?: number;
	sort_descending?: boolean;
	reward_types?: number[];
	excluded_community_item_classes?: number[];
	definitionids?: number[];
	filters?: number[];
	filter_match_all_category_tags?: string[];
	filter_match_any_category_tags?: string[];
	contains_definitionids?: number[];
	include_direct_purchase_disabled?: boolean;
	excluded_content_descriptors?: number[];
	excluded_appids?: number[];
	search_term?: string;
}

export interface CLoyaltyRewards_QueryRewardItems_Response {
	definitions?: LoyaltyRewardDefinition[];
	total_count?: number;
	count?: number;
	next_cursor?: string;
}

export interface CLoyaltyRewards_RedeemPoints_Request {
	defid?: number;
	expected_points_cost?: string;
}

export interface CLoyaltyRewards_RedeemPoints_Response {
	communityitemid?: string;
	bundle_community_item_ids?: string[];
}

export interface CLoyaltyRewards_RedeemPointsForBadgeLevel_Request {
	defid?: number;
	num_levels?: number;
}

export interface CLoyaltyRewards_RedeemPointsForProfileCustomization_Request {
	customization_type?: number;
}

export interface CLoyaltyRewards_RedeemPointsForProfileCustomization_Response {
	purchaseid?: string;
}

export interface CLoyaltyRewards_RedeemPointsForProfileCustomizationUpgrade_Request {
	customization_type?: number;
	new_level?: number;
}

export interface CLoyaltyRewards_RedeemPointsForProfileCustomizationUpgrade_Response {
}

export interface CLoyaltyRewards_RedeemPointsToUpgradeItem_Request {
	defid?: number;
	communityitemid?: string;
}

export interface CLoyaltyRewards_RegisterForSteamDeckRewards_Request {
	serial_number?: string;
	controller_code?: string;
}

export interface CLoyaltyRewards_RegisterForSteamDeckRewards_Response {
	granted_profile_modifier?: boolean;
}

export interface LoyaltyRewardPurchaseBonus {
	bonusid?: string;
	appid?: number;
	active?: boolean;
	points?: number;
	timestamp_start?: number;
	timestamp_end?: number;
	internal_description?: string;
}

export interface LoyaltyRewards {
}

///////////////////////////////////////////////
// service_phone.proto
///////////////////////////////////////////////

export interface CPhone_AddPhoneToAccount_Response {
	success?: boolean;
	phone_number_type?: number;
}

export interface CPhone_ConfirmAddPhoneToAccount_Request {
	steamid?: string;
	stoken?: string;
}

export interface CPhone_IsAccountWaitingForEmailConfirmation_Request {
}

export interface CPhone_IsAccountWaitingForEmailConfirmation_Response {
	awaiting_email_confirmation?: boolean;
	seconds_to_wait?: number;
}

export interface CPhone_SendPhoneVerificationCode_Request {
	language?: number;
}

export interface CPhone_SendPhoneVerificationCode_Response {
}

export interface CPhone_SetAccountPhoneNumber_Request {
	phone_number?: string;
	phone_country_code?: string;
}

export interface CPhone_SetAccountPhoneNumber_Response {
	confirmation_email_address?: string;
	phone_number_formatted?: string;
}

export interface CPhone_VerifyAccountPhoneWithCode_Request {
	code?: string;
}

export interface CPhone_VerifyAccountPhoneWithCode_Response {
}

export interface Phone {
}

///////////////////////////////////////////////
// steammessages_auth.steamclient.proto
///////////////////////////////////////////////

///////////////////////////////////////////////
// steammessages_base.proto
///////////////////////////////////////////////

///////////////////////////////////////////////
// steammessages_clientserver_login.proto
///////////////////////////////////////////////

export interface CMsgClientHello {
	protocol_version?: number;
}

///////////////////////////////////////////////
// steammessages_twofactor.steamclient.proto
///////////////////////////////////////////////

export interface CTwoFactor_Time_Request {
	sender_time?: string;
}

export interface CTwoFactor_Time_Response {
	server_time?: string;
	skew_tolerance_seconds?: string;
	large_time_jink?: string;
	probe_frequency_seconds?: number;
	adjusted_time_probe_frequency_seconds?: number;
	hint_probe_frequency_seconds?: number;
	sync_timeout?: number;
	try_again_seconds?: number;
	max_attempts?: number;
}

export interface CTwoFactor_Status_Request {
	steamid?: string;
}

export interface CTwoFactor_Status_Response {
	state?: number;
	inactivation_reason?: number;
	authenticator_type?: number;
	authenticator_allowed?: boolean;
	steamguard_scheme?: number;
	token_gid?: string;
	email_validated?: boolean;
	device_identifier?: string;
	time_created?: number;
	revocation_attempts_remaining?: number;
	classified_agent?: string;
	allow_external_authenticator?: boolean;
	time_transferred?: number;
	version?: number;
}

export interface CTwoFactor_AddAuthenticator_Request {
	steamid?: string;
	authenticator_time?: string;
	serial_number?: string;
	authenticator_type?: number;
	device_identifier?: string;
	sms_phone_id?: string;
	http_headers?: string[];
	version?: number;
}

export interface CTwoFactor_AddAuthenticator_Response {
	shared_secret?: Buffer;
	serial_number?: string;
	revocation_code?: string;
	uri?: string;
	server_time?: string;
	account_name?: string;
	token_gid?: string;
	identity_secret?: Buffer;
	secret_1?: Buffer;
	status?: number;
	phone_number_hint?: string;
}

export interface CTwoFactor_SendEmail_Request {
	steamid?: string;
	email_type?: number;
	include_activation_code?: boolean;
}

export interface CTwoFactor_SendEmail_Response {
}

export interface CTwoFactor_FinalizeAddAuthenticator_Request {
	steamid?: string;
	authenticator_code?: string;
	authenticator_time?: string;
	activation_code?: string;
	http_headers?: string[];
	validate_sms_code?: boolean;
}

export interface CTwoFactor_FinalizeAddAuthenticator_Response {
	success?: boolean;
	want_more?: boolean;
	server_time?: string;
	status?: number;
}

export interface CTwoFactor_UpdateTokenVersion_Request {
	steamid?: string;
	version?: number;
	signature?: Buffer;
}

export interface CTwoFactor_UpdateTokenVersion_Response {
}

export interface CTwoFactor_RemoveAuthenticator_Request {
	revocation_code?: string;
	revocation_reason?: number;
	steamguard_scheme?: number;
	remove_all_steamguard_cookies?: boolean;
}

export interface CTwoFactor_RemoveAuthenticator_Response {
	success?: boolean;
	server_time?: string;
	revocation_attempts_remaining?: number;
}

export interface CTwoFactor_RemoveAuthenticatorViaChallengeStart_Request {
}

export interface CTwoFactor_RemoveAuthenticatorViaChallengeStart_Response {
	success?: boolean;
}

export interface CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Request {
	sms_code?: string;
	generate_new_token?: boolean;
	version?: number;
}

export interface CRemoveAuthenticatorViaChallengeContinue_Replacement_Token {
	shared_secret?: Buffer;
	serial_number?: string;
	revocation_code?: string;
	uri?: string;
	server_time?: string;
	account_name?: string;
	token_gid?: string;
	identity_secret?: Buffer;
	secret_1?: Buffer;
	status?: number;
	steamguard_scheme?: number;
	steamid?: string;
}

export interface CTwoFactor_RemoveAuthenticatorViaChallengeContinue_Response {
	success?: boolean;
	replacement_token?: CRemoveAuthenticatorViaChallengeContinue_Replacement_Token;
}

export interface TwoFactor {
}

///////////////////////////////////////////////
// steammessages_unified_base.steamclient.proto
///////////////////////////////////////////////

